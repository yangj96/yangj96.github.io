<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Leetcode笔记]]></title>
    <url>%2F2020%2F03%2F15%2Fleetcode-notes%2F</url>
    <content type="text"><![CDATA[字符串的最大公因子 长度满足最大公约数，暴力检查a和b串或者判断a+b == b+a 多数元素 分治 随机化 最长上升子序列优化 最长上升子序列的个数 最长上升连续子序列 最长连续序列 排序 暴力枚举+哈希 并查集 划分和相等的k个子集 分发糖果 矩阵中的增长路径 动态规划和拓扑排序的关系 黄金矿工 不同的子序列]]></content>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer题目总结]]></title>
    <url>%2F2020%2F02%2F21%2Fjianzhi%2F</url>
    <content type="text"><![CDATA[旋转数组的最小数字二分，注意处理单调递增和存在多个相同元素的情况，例如1，0，1，1，1 int findMin(vector&lt;int&gt;&amp; a) { int n = a.size(); if (n == 0) return -1; while (n &gt; 1 &amp;&amp; a[0] == a[n-1]) n--; if (a[0] &lt; a[n-1]) return a[0]; int x = a[0]; int l = 0, r = n - 1; while (l &lt; r) { int mid = l + r &gt;&gt; 1; if (a[mid] &lt; x) r = mid; else l = mid + 1; } return a[l]; } 找到数组中的重复数字 置换法 int duplicateInArray(vector&amp; nums) { int n = nums.size(); for (int i = 0; i &lt; n; i++) { if (nums[i] &lt; 0 || nums[i] &gt; n - 1) return -1; } for (int i = 0; i &lt; n; i++) { while(nums[i] != i) { if (nums[i] == nums[nums[i]]) return nums[i]; swap(nums[i], nums[nums[i]]); } } return -1; } 下标对应元素个数二分 int duplicateInArray(vector&amp; nums) { int l = 1, r = nums.size() - 1; while (l &lt; r) { int mid = l + r &gt;&gt; 1; // 划分的区间：[l, mid], [mid + 1, r] int s = 0; for (auto x : nums) s += x &gt;= l &amp;&amp; x &lt;= mid; if (s &gt; mid - l + 1) r = mid; else l = mid + 1; } return r; } 0到n-1中缺失的数字 // 二分，特殊情况：当所有数都满足nums[i] == i时，表示缺失的是 n int getMissingNumber(vector&amp; nums) { if (nums.empty()) return 0; int l = 0, r = nums.size() - 1; while (l &lt; r) { int mid = l + r &gt;&gt; 1; if (nums[mid] != mid) r = mid; else l = mid + 1; } if (nums[r] == r) r ++ ; return r; } 调整数组使奇数排在偶数前 不要求保证原始稳定顺序的话可以使用双指针 void reOrderArray(vector&lt;int&gt; &amp;a) { int l = 0, r = a.size() -1; while (l &lt; r) { while (l &lt; r &amp;&amp; a[l] % 2 == 1) l++; while (l &lt; r &amp;&amp; a[r] % 2 == 0) r--; if (l &lt; r) swap(a[l], a[r]); } } 数组中出现次数超过一半的数字多数投票问题，Boyer-Moore Majority Vote Algorithm，时间复杂度为 O(N) 使用 cnt 来统计一个元素出现的次数，当遍历到的元素和统计元素相等时，令 cnt++，否则令 cnt–，当cnt为0时将统计元素置为当前元素并令cnt = 1。 如果前面查找了 i 个元素，且 cnt == 0，说明前 i 个元素没有 majority，或者有 majority，但是出现的次数少于 i / 2 ，因为如果多于 i / 2 的话 cnt 就一定不会为 0 。此时剩下的 n - i 个元素中，majority 的数目依然多于 (n - i) / 2，因此继续查找一定能找出 majority。 int moreThanHalfNum_Solution(vector&lt;int&gt;&amp; nums) { int cnt = 0, val = -1; for (auto x : nums) { if (!cnt) { cnt = 1; val = x; } else { if (val == x) cnt++; else cnt--; } } return val; } 最长不含重复字符的子字符串双指针 int longestSubstringWithoutDuplication(string s) { unordered_map&lt;char,int&gt; hash; int res = 0; for (int i = 0, j = 0; j &lt; s.size(); j ++ ) { if ( ++ hash[s[j]] &gt; 1) { while (i &lt; j) { hash[s[i]]--; i ++ ; if (hash[s[j]] == 1) break; } } res = max(res, j - i + 1); } return res; } 用两个栈实现队列12// push(x)，我们直接将x插入主栈中即可。// pop()，此时我们需要弹出最先进入栈的元素，也就是栈底元素。我们可以先将所有元素从主栈中弹出，压入辅助栈中。/ // 则辅助栈的栈顶元素就是我们要弹出的元素，将其弹出即可。然后再将辅助栈中的元素全部弹出，压入主栈中。 顺时针打印矩阵12345678910111213141516171819202122vector&lt;int&gt; printMatrix(vector&lt;vector&lt;int&gt; &gt; matrix) &#123; int n = matrix.size(); vector&lt;int&gt; res; if (n == 0) return res; int m = matrix[0].size(); int dx[4] = &#123;0, 1, 0, -1&#125;; int dy[4] = &#123;1, 0, -1, 0&#125;; int x = 0, y = 0, d = 0; vector&lt;vector&lt;bool&gt;&gt; st(n, vector&lt;bool&gt;(m, false)); for (int i = 0; i &lt; n * m; i++) &#123; res.push_back(matrix[x][y]); st[x][y] = true; int a = x + dx[d], b = y + dy[d]; if (a &lt; 0 || a &gt;= n || b &lt; 0 || b &gt;= m || st[a][b]) &#123; d = (d + 1) % 4; a = x + dx[d], b = y + dy[d]; &#125; x = a; y = b; &#125; return res;&#125; 矩阵中是否存在字符串路径1234567891011121314151617181920212223242526272829303132333435363738class Solution &#123;public: bool dfs(vector&lt;vector&lt;char&gt;&gt;&amp; matrix, string &amp;str, int x, int y, int u) &#123; if (matrix[x][y] != str[u]) return false; if (u == str.size() - 1) return true; matrix[x][y] = &apos;.&apos;; for (int i = 0; i &lt; 4; i++) &#123; int nx = x + dx[i]; int ny = y + dy[i]; if (nx &gt;= 0 &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; m &amp;&amp; matrix[nx][ny] != &apos;.&apos;) &#123; if (dfs(matrix, str, nx, ny, u+1)) return true; &#125; &#125; matrix[x][y] = str[u]; return false; &#125; bool hasPath(vector&lt;vector&lt;char&gt;&gt;&amp; matrix, string &amp;str) &#123; n = matrix.size(); if (n == 0) return false; m = matrix[0].size(); for (int i = 0; i &lt; n; i++) &#123; for (int j = 0; j &lt; m; j++) &#123; if (dfs(matrix, str, i, j, 0)) &#123; return true; &#125; &#125; &#125; return false; &#125; private: int n, m; int dx[4] = &#123;0, 0, 1, -1&#125;; int dy[4] = &#123;1, -1, 0, 0&#125;;&#125;; 2sumvector&lt;int&gt; findNumbersWithSum(vector&lt;int&gt;&amp; nums, int target) { unordered_map&lt;int, int&gt; hash; for (auto x : nums) { if (hash.count(target-x)) { return vector&lt;int&gt;{target - x, x}; } hash[x] = 1; } return vector&lt;int&gt;(); } 斐波那契数列滚动数组递推 矩阵快速幂 丑数int getUglyNumber(int n) { vector&lt;int&gt; dp(n); dp[0] = 1; int i2 = 0, i3 = 0, i5 = 0; for(int i = 1; i &lt; n; i++) { int next2 = dp[i2] * 2, next3 = dp[i3] * 3, next5 = dp[i5] * 5; dp[i] = min(next2, min(next3, next5)); if (next2 == dp[i]) i2 ++ ; if (next3 == dp[i]) i3 ++ ; if (next5 == dp[i]) i5 ++ ; } return dp[n-1]; } 剪绳子给你一根长度为 n 绳子，请把绳子剪成 m 段（m、n 都是整数，2≤n≤58 并且 m≥2）。 每段的绳子的长度记为k[0]、k[1]、……、k[m]。k[0]k[1] … k[m] 可能的最大乘积是多少？ 贪心+数学推导 int maxProductAfterCutting(int length) { if (length == 2) return 1; int res = 1; while (length % 3 == 1) { res *= 4; length -= 4; } while (length % 3 == 2) { res *= 2; length -= 2; } while (length) { res *= 3; length -= 3; } return res; } dp 连续子数组的最大和int maxSubArray(vector&lt;int&gt;&amp; nums) { int s = 0, res = -2e9; for (auto x : nums) { if (s &lt; 0) s = x; else s += x; res = max(res, s); } return res; } 数字序列中某一位的数字int digitAtIndex(int n) { long long i = 1, num = 9, base = 1; while (n &gt; i * num) { n -= i * num; i ++; num *= 10; base *= 10; } int number = base + (n + i - 1) / i - 1; int r = n % i ? n % i : i; for (int j = 0; j &lt; i - r; j ++ ) number /= 10; return number % 10; } #####正则表示式匹配 状态表示：f[i][j]表示p从j开始到结尾，是否能匹配s从i开始到结尾状态转移： 如果p[j+1]不是*通配符： p[j]是正常字符，f[i][j] = s[i] == p[j] &amp;&amp; f[i+1][j+1] p[j]是.，f[i][j] = f[i+1][j+1]如果p[j+1]是星号通配符，f[i][j] = f[i][j+2] || ((s[i] == p[j] || p[j] == &#39;.&#39; ) &amp;&amp; f[i+1][j]) 1234567891011121314151617181920212223242526class Solution &#123;public: int n, m; string s, p; vector&lt;vector&lt;int&gt;&gt; f; bool isMatch(string _s, string _p) &#123; s = _s, p = _p; n = s.size(), m = p.size(); f = vector&lt;vector&lt;int&gt;&gt; (n+1, vector&lt;int&gt; (m+1, -1)); return dp(0, 0); &#125; bool dp (int i, int j) &#123; if (f[i][j] != -1) return f[i][j]; if (j == m) &#123; return f[i][j] = i == n; &#125; bool firstMatch = i &lt; n &amp;&amp; (s[i] == p[j] || p[j] == &apos;.&apos;); if (j + 1 &lt; m &amp;&amp; p[j+1] == &apos;*&apos;) &#123; f[i][j] = dp(i, j+2) || (firstMatch &amp;&amp; dp(i+1, j)); &#125; else &#123; f[i][j] = firstMatch &amp;&amp; dp(i+1, j+1); &#125; return f[i][j]; &#125;&#125;; 不用加减乘除实现加法扑克顺子]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[算法模版-中级篇]]></title>
    <url>%2F2020%2F02%2F03%2Falgo-template2%2F</url>
    <content type="text"><![CDATA[目录 离散化 区间合并/区间贪心 前缀和/差分 树状数组 线段树 图论 字符串匹配 Trie树 动态规划 离散化待离散值排序、去重，然后二分求离散化对应坐标 单值离散化 1234567891011121314151617vector&lt;int&gt; all;sort(all.begin(), all.end());all.erase(unique(all.begin(), all.end()), all.end());// 待离散化值y-&gt;离散化后xint x = find(all.begin(), all.end(), y) - all.begin();// orint bs(int k) &#123; int l = 0, r = all.size() - 1; while(l &lt; r) &#123; int mid = l + r &gt;&gt; 1; if (all[mid] &gt;= k) r = mid; else l = mid + 1; &#125; return r + 1;&#125;int x = bs(y); 线段坐标离散化 每个端点需要考虑其本身和前后两点，从而将线段压缩 1234567891011121314151617181920int compress(vector&lt;int&gt; &amp;x1, vector&lt;int&gt; &amp;x2, int w) &#123; vector&lt;int&gt; all; for (int i = 0; i &lt; x1.size(); i++) &#123; for (int d = -1; d &lt;= 1; d++) &#123; int tx1 = x1[i] + d, tx2 = x2[i] + d; if (tx1 &gt;= 1 &amp;&amp; tx1 &lt;= w) all.push_back(tx1); if (tx2 &gt;= 1 &amp;&amp; tx2 &lt;= w) all.push_back(tx2); &#125; &#125; sort(all.begin(), all.end()); all.erase(unique(all.begin(), all.end()), all.end()); for (int i = 0; i &lt; x1.size(); i++) &#123; x1[i] = find(all.begin(), all.end(), x1[i]) - all.begin(); x2[i] = find(all.begin(), all.end(), x2[i]) - all.begin(); &#125; return all.size();&#125; 区间贪心问题区间合并按区间左端点排序 12345678910111213141516171819void merge(vector&lt;PII&gt; &amp; segs) &#123; vector&lt;PII&gt; res; sort(segs.begin(), segs.end()); int st = -2e9, ed = -2e9; for(auto seg : segs) &#123; if (ed &lt; seg.first) &#123; if (st != -2e9) res.push_back(&#123;st, ed&#125;); st = seg.first; ed = seg.second; &#125; else ed = max(ed, seg.second); &#125; if (st != -2e9) &#123; res.push_back(&#123;st, ed&#125;); &#125; segs = res;&#125; 区间覆盖问题求覆盖各区间的最少点数(每个区间至少包含一个点)求不相交区间的最多区间数目按区间右端点排序，选取最右点 123456789101112131415161718192021222324typedef pair&lt;int, int&gt; PII;bool cmp(const PII &amp;a, const PII &amp;b) &#123; return a.second &lt; b.second;&#125;int main() &#123; int n; cin &gt;&gt; n; int a, b; vector&lt;PII&gt; v; for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; a &gt;&gt; b; v.push_back(&#123;a, b&#125;); &#125; sort(v.begin(), v.end(), cmp); int res = 0, ed = -2e9; for (int i = 0; i &lt; n; i++) &#123; if (ed &lt; v[i].first) &#123; ed = v[i].second; res ++; &#125; &#125; cout &lt;&lt; res &lt;&lt; endl;&#125; 求按照不相交区间分组的最少分组数目按区间左端点排序，记录每个组的最右坐标，依次枚举每个区间能否加入各个组，如果不能则新开一组。实际上枚举每个区间是否有可加入的组只需要找右坐标最小的组即可。 12345678910111213141516171819202122232425#define l first#define r secondtypedef pair&lt;int, int&gt; PII;int main() &#123; int n; cin &gt;&gt; n; vector&lt;PII&gt; a(n); for (int i = 0; i &lt; n; i++) &#123; int x, y; cin &gt;&gt; x &gt;&gt; y; a[i] = &#123;x, y&#125;; &#125; sort(a.begin(), a.end()); priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; que; for (int i = 0; i &lt; n; i++) &#123; if (que.empty() || a[i].l &lt;= que.top()) &#123; que.push(a[i].r); &#125; else &#123; que.pop(); que.push(a[i].r); &#125; &#125; cout &lt;&lt; que.size() &lt;&lt; endl;&#125; 求覆盖指定线段的最少区间数目按区间左端点排序，依次枚举选取满足左端点在线段左侧的右端点最大的区间 1234567891011121314151617181920212223242526272829sort(range, range + n);int res = 0;bool success = false;for (int i = 0; i &lt; n; i ++ )&#123; int j = i, r = -2e9; while (j &lt; n &amp;&amp; range[j].l &lt;= st) &#123; r = max(r, range[j].r); j ++ ; &#125; if (r &lt; st) &#123; res = -1; break; &#125; res ++ ; if (r &gt;= ed) &#123; success = true; break; &#125; st = r; i = j - 1;&#125;if (!success) res = -1;cout &lt;&lt; res &lt;&lt; endl; 活动调度问题选取结束时间最早的活动 前缀和/差分一维前缀和为便于计算，下标从1开始 s[0] = a[0] = 0 s[i] = s[i-1] + a[i]; 求区间[l, r]元素和s[r] - s[l-1] 二维前缀和s[i][j] = s[i-1][j] + s[i][j-1] - s[i-1][j-1] + a[i][j] 求区间[(x1, y1), (x2, y2)]元素和s[x2][y2] - s[x1-1][y1] - s[x1][y1-1] + s[x1-1][y1-1] 一维差分差分可看作前缀和的逆操作，可实现$O(1)$时间的区间修改和单点修改 123456789void modify(int l, int r, int c) &#123; b[l] += c; b[r+1] -= c;&#125;// 复原原矩阵更新后的值for (int i = 1; i &lt;= n; i++) &#123; b[i] += b[i-1];&#125; 二维差分12345678910111213141516const int N = 1005; // 注意数组从1开始且设计N+1，N至少要大于等于2 int b[N][N];void modify(int x1, int y1, int x2, int y2, int c) &#123; b[x1][y1] += c; b[x2+1][y1] -= c; b[x1][y2+1] -= c; b[x2+1][y2+1] += c;&#125;// 复原原矩阵更新后的值for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= m; j++) &#123; b[i][j] += b[i-1][j] + b[i][j-1] - b[i-1][j-1]; &#125;&#125; 差分+贪心求区间内所有值通过区间加1/减1全部相等的最小变换次数 差分+前缀和满足互相看见约束的序列各位置的最高可能高度 树状数组树状数组是支持区间单点修改的前缀和 将上图所有区间从左至右按序排列，其区间长度的二进制表示为：1,10,1, 100, 1, 10, 1, 1000而图中区间标号对应的二进制表示为：1,10,11,100,101,110,111,1000用lowbit函数将区间标号映射为区间长度：区间长度即区间标号二进制表示从右往左出现第一个1以及这个1之后的那些0组成数的二进制对应的十进制的数。 区间标号映射区间长度 123int lowbit(int x) &#123; return x &amp; -x;&#125; 初始化空间$O(n)$，注意下标从1到n 单点修改操作需要更新所有包含它的区间，时间复杂度$O(log n)$ 123456int tr[N];void add(int x, int c) &#123; for (int i = x; i &lt;= n; i += lowbit(i)) tr[i] += c;&#125; 区间查询需要查询分支包含的所有区间，时间复杂度$O(log n)$ 12345678910// a[1]...a[x]int presum(int x) &#123; int res = 0; for (int i = x; i; i -= lowbit(i)) res += tr[i];&#125;// a[i]...a[j]int sum(int i, int j) return presum(j) - presum(i-1); e.x. 计算右侧小于当前元素的个数 差分+树状数组可实现区间修改、单点查询或区间修改、区间查询 二维树状数组线段树五类操作， 四倍空间，初始化复杂度$O(n)$，区间操作查询或更新复杂度均为$O(\lg n)$ pushdown操作用于区间修改时的懒标记（仅支持单点修改时不需要），在区间修改和查询需要分裂区间前调用 支持单点修改的区间最大值查询123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960const int N = 200010;struct Node &#123; int l, r; int v;&#125;tr[N * 4];void pushup(int u) &#123; tr[u].v = max(tr[u &lt;&lt; 1].v, tr[u &lt;&lt; 1 | 1].v);&#125;void build(int u, int l, int r) &#123; tr[u] = &#123;l, r&#125;; if (l == r) return; int mid = l + r &gt;&gt; 1; build(u &lt;&lt; 1, l, mid); build(u &lt;&lt; 1 | 1, mid + 1, r); // 如果初始化时对v有修改，则需要调用pushup(u);&#125;// 单点修改void modify(int u, int x, int v) &#123; if (tr[u].l == x &amp;&amp; tr[u].r == x) tr[u].v = v; else &#123; int mid = tr[u].l + tr[u].r &gt;&gt; 1; if (x &lt;= mid) modify(u &lt;&lt; 1, x, v); else modify(u &lt;&lt; 1 | 1, x, v); pushup(u); &#125;&#125;int query(int u, int l, int r) &#123; if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) return tr[u].v; int mid = tr[u].l + tr[u].r &gt;&gt; 1; int v = 0; // 注意递归调用的查询区间仍然是[l, r]，使用[l, mid]可以会放大空间 if (l &lt;= mid) v = query(u &lt;&lt; 1, l, r); if (r &gt; mid) v = max(v, query(u &lt;&lt; 1 | 1, l, r)); return v;&#125;int main () &#123; int m, p; cin &gt;&gt; m &gt;&gt; p; int n = 0, last = 0; build(1, 1, m); for (int i = 0; i &lt; m; i++) &#123; char op; int x; cin &gt;&gt; op &gt;&gt; x; if (op == &apos;Q&apos;) &#123; last = query(1, n-x+1, n); cout &lt;&lt; last &lt;&lt; endl; &#125; else &#123; modify(1, n+1, (x + last) % p); n++; &#125; &#125;&#125; 支持区间修改的区间和查询123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778const int N = 100010;typedef long long ll;int a[N];struct Node &#123; int l, r; ll sum, add;&#125;tr[N * 4];void pushup(int u) &#123; tr[u].sum = tr[u&lt;&lt;1].sum + tr[u &lt;&lt; 1 | 1].sum;&#125;void pushdown(int u) &#123; auto &amp;root = tr[u], &amp;left = tr[u&lt;&lt;1], &amp;right = tr[u &lt;&lt; 1 | 1]; if (root.add) &#123; left.add += root.add; left.sum += (ll)(left.r - left.l + 1) * root.add; right.add += root.add; right.sum += (ll)(right.r - right.l + 1) * root.add; root.add = 0; &#125;&#125;void build(int u, int l, int r) &#123; if (l == r) tr[u] = &#123;l, r, a[l], 0&#125;; else &#123; tr[u] = &#123;l, r&#125;; int mid = l + r &gt;&gt; 1; build(u &lt;&lt; 1, l, mid); build(u &lt;&lt; 1 | 1, mid + 1, r); pushup(u); &#125;&#125;// 区间修改void modify(int u, int l, int r, int d) &#123; if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123; tr[u].sum += (ll)(tr[u].r - tr[u].l + 1) * d; tr[u].add += d; &#125; else &#123; pushdown(u); int mid = tr[u].l + tr[u].r &gt;&gt; 1; if (l &lt;= mid) modify(u &lt;&lt; 1, l, r, d); if (r &gt; mid) modify(u &lt;&lt; 1 | 1, l, r, d); pushup(u); &#125;&#125;ll query(int u, int l, int r) &#123; if (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) return tr[u].sum; pushdown(u); int mid = tr[u].l + tr[u].r &gt;&gt; 1; ll v = 0; if (l &lt;= mid) v = query(u &lt;&lt; 1, l, r); if (r &gt; mid) v += query(u &lt;&lt; 1 | 1, l, r); return v;&#125;int main() &#123; int n, m; cin &gt;&gt; n &gt;&gt; m; for (int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i]; build(1, 1, n); while (m--) &#123; int l, r, d; char op; cin &gt;&gt; op &gt;&gt; l &gt;&gt; r; if (op == &apos;C&apos;) &#123; cin &gt;&gt; d; modify(1, l, r, d); &#125; else &#123; cout &lt;&lt; query(1, l, r) &lt;&lt; endl; &#125; &#125;&#125; 图论邻接矩阵int G [maxv][maxv]或&lt;vector&lt;vector&lt;int&gt; &gt; G 邻接表vector&lt;int&gt; G[maxv] struct edge { int to; int cost; }vector&lt;edge&gt; G[maxv] BFS/DFS搜索时间复杂度均为$O(V+ E)$ 染色法判定二分图1234567891011121314151617181920212223vector&lt;int&gt; G[maxv];int color[maxv];int V;bool dfs(int v, int c) &#123; color[v] = c; for (int i = 0; i &lt; G[v].size(); i++) &#123; if (color[G[v][i]] == c) return false; if (color[G[v][i] == 0 &amp;&amp; !dfs(G[v][i], -c)) return false; &#125; return true;&#125;bool check() &#123; bool flag = true; for (int i = 0; i &lt; V; i++) if (color[i] == 0) if (!dfs(i, 1)) &#123; flag = false; break; &#125; return flag;&#125; 拓扑排序拓扑图（可以拓扑排序的图） 等价于有向无环图DAG 将入度为0点入队，出队去边减去相关入度将入度为0点入队，队列元素即拓扑序，队列元素小于顶点数说明可能存在重边和自环，拓扑序列不存在 $O(V+E)$ 12345678910111213141516171819202122232425262728293031323334353637383940414243const int N = 100001;vector&lt;int&gt; G[N];int d[N]; // 入度数int n, m;// 使用stl queue元素会pop出队需要另开数组单独记录结果或者直接使用数组模拟队列vector&lt;int&gt; res; bool topsort() &#123; queue&lt;int&gt; q; // 如果最终拓扑序需要按字典序输出，则将队列改为小根堆 for (int i = 1; i &lt;= n; i++) if (!d[i]) &#123; q.push(i); res.push_back(i); &#125; while (q.size()) &#123; int t = q.front(); q.pop(); for (int i = 0; i &lt; G[t].size(); i++) if (--d[G[t][i]] == 0) &#123; q.push(G[t][i]); res.push_back(G[t][i]); &#125; &#125; return res.size() == n;&#125;int main() &#123; cin &gt;&gt; n &gt;&gt; m; for (int i = 0; i &lt; m; i++) &#123; int a, b; cin &gt;&gt; a &gt;&gt; b; G[a].push_back(b); d[b]++; &#125; if (!topsort()) cout &lt;&lt; -1 &lt;&lt; endl; else &#123; for (int i = 0; i &lt; n; i++) cout &lt;&lt; res[i] &lt;&lt; &quot; &quot;; cout &lt;&lt; endl; &#125;&#125; 最短路问题Bellman-Ford 允许负环每条边松弛|V| -1次（最坏情况下每次循环只松弛了一条边）之后如果存在不满足三角不等式的结点v.d &gt; u.d + w(u,v)说明存在负权重环 时间复杂度$O(VE)$ 优化 - 拓扑排序后按序松弛 Dijkstra 不许负权重边维护一个已求出最短路径节点的集合S，以v.d为key构造最小堆，每次选择V-S中的最小堆顶，将其加入S并松弛所有与其相邻的边。注意第一次执行循环extract-min得到的是源点s 优先队列实现时间复杂度$O(VE)$ Floyd 适用负权重边，不允许存在负权重环 时间复杂度$O(V^3)$ 最小生成树Kruskal算法：集合A是森林，按权重从低到高考察每条边，如果它将两棵不同的树连接起来就加入到森林A里并完成两棵树的合并 Prim算法：集合A是一棵树，每次加入连接集合A和A之外结点的所有边中权重最小的边 用并查集和优先队列分别实现，时间复杂度均为$O(ElgV)$ 字符串匹配暴力时间复杂度$O(n-m+1)*m$ 123456789for (int i = 1; i &lt;= (n - m + 1); i++) &#123; bool flag = true; for (int j = 1; j &lt;= m; j++) if (s[i + j - 1] != p[j]) &#123; flag = false; break; &#125;&#125;return flag; KMP前缀函数 $\pi[q]$是能构成$P_q (即P[1…q])$真后缀的P的最长前缀长度$\pi[q] = max(k : k &lt; q 且 P_k \sqsupset P_q)$ next[i]表示以p[i]结尾的p的子串的前缀函数值，即next[i] = j 表示 p[1…j] == p[i - j + 1…i] 预处理阶段摊还分析，时间复杂度$\Theta(m)$，因为j最多++ m次，因此while循环最多执行m次，同理匹配阶段时间复杂度$\Theta(n)$ 字符串下标从1开始，next[1] = 0 1234567891011121314151617181920212223// 待匹配串s，模式串p，下标从1开始int n+1 = s.size();int m+1 = p.size();// 求next数组, next[1] = 0for (int i = 2, j = 0; i &lt;= m; i++) &#123; while(j &amp;&amp; p[i] != p[j+1]) j = ne[j]; if (p[i] == p[j+1]) j++; ne[i] = j;&#125;// kmp匹配for (int i = 1, j = 0; i &lt;= n; i++) &#123; // j表示当前模版串下一个要匹配位置的前一位 // j == 0 表示j退回到起点 // 如果j下一个位置不能匹配，则匹配串需要后移j-next[j]步，新的匹配末端位置即j-(j-next[j]) while(j &amp;&amp; s[i] != p[j+1]) j = ne[j]; if (s[i] == p[j+1]) j++; if (j == m) &#123; j = ne[j]; // 匹配成功后的逻辑 //e.x. cout &lt;&lt; i - m &lt;&lt; endl; &#125;&#125; 字符串下标从0开始，next[0] = -1 1234567891011121314ne[0] = -1;for (int i = 1, j = -1; i &lt; m; i ++ )&#123; while (j &gt;= 0 &amp;&amp; p[j + 1] != p[i]) j = ne[j]; if (p[j + 1] == p[i]) j ++ ; ne[i] = j;&#125;for (int i = 0, j = -1; i &lt; n; i ++ )&#123; while (j &amp;&amp; s[i] != p[j + 1]) j = ne[j]; if (s[i] == p[j + 1]) j ++ ; if (j == m - 1) cout &lt;&lt; i - j &lt;&lt; &apos; &apos;;&#125; Trie 树高效存储和查询字符串的集合 插入和查询时间复杂度$O(\log n)$，时间复杂度$O(n^2)$ 12345678910111213141516171819202122232425const int N = 100010;int son[N][26]; // Trie树每个节点的字节点，此处英文字母只包含26个小写字母int cnt[N];// 以当前这个点结尾的单词数量int idx; // 表示层数下标，0号既是空节点也是Trie树的根节点void insert(string str) &#123; int p = 0; for (int i = 0; i &lt; str.size(); i++) &#123; int u = str[i] - 'a'; if (!son[p][u]) son[p][u] = ++idx; p = son[p][u]; &#125; cnt[p] ++;&#125;int query(string str) &#123; int p = 0; for (int i = 0; i &lt; str.size(); i++) &#123; int u = str[i] - 'a'; if (!son[p][u]) return 0; p = son[p][u]; &#125; return cnt[p];&#125; 动态规划 状态表示 f(i, j) 表示集合[i, j]的某一属性，例如集合中的最大值、最小值或数量 状态计算 根据集合的划分计算 时间复杂度：状态数目 * 状态转移方式 空间复杂度：子问题的个数 背包问题N个物品，体积为V的背包，每类物品体积为$v_i$，价值权重为$w_i$，求满足体积限制的背包的最大价值 01背包每类物品只能用一次 状态f(i, j) 表示从前i类物品中选，所选物品体积小于j的所有选法的集合中 价值最大选法的价值 12345678910111213f[0][0-V] = 0for (int i = 1; i &lt;= n; i++) for (int j = 0; j &lt;= m; j++) &#123; f[i][j] = f[i-1][j]; if (j &gt;= v[i]) f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i]); &#125;// 滚动数组优化，因为f中i只用到i-1且j只用到左侧j和j-v[i]，因此可用一维数组从大到小滚动优化f[0][0-V] = 0for (int i = 1; i &lt;= n; i++) for (int j = m; j &gt;= v[i]; j--) &#123; f[j] = max(f[j], f[j - v[i]] + w[i]); &#125; 完全背包每类物品可以使用无限次，与01背包的区别主要在于集合的划分变为$f[i, j] = f[i-1, j-v[i]k] + kw[i]$ 因此完全背包的状态计算可以优化为$f[i, j] = max(f[i-1, j], f[i, j-v[i]] + w[i])$，优化后可以使用滚动数组进一步简化为一维，和01背包只有j的计算顺序不同 多重背包每类物品有$s_i$个，与完全背包状态划分计算相同，只不过k由$s[i]$约束. 多重背包的优化 二进制拆分优化 由 $O(NS)$优化至$O(N\lg S)$ 分组背包每组物品只能选一个，状态f(i, j)的划分根据第i组物品选第k个来拆分计算 1// f[i][j] = max(f[i-1][j], f[i-1][j - v[i][k]] + w[i][k])k 计数DP方案数类初始化通常为f[0] = 1，因为空集也可以看作一种划分方案 整数划分方案数求1到n中任意个数之和为x的方案数 转换为完全背包问题，状态f(i, j)表示为从1-i个数中选择（每个数可选无数次）使得和恰好为j的方案数 状态计算f[i][j] = f[i-1][j] + f[i-1, j-i] + f[i-1][j-2*i] +... f[i][j] = f[i - 1][j] + f[i, j - i] 状态f(i, j)表示所有总和为i恰好表示为j个数之和的方案数，状态计算根据j个数的最小值是否为1划分，对于最小值为1的情况，可以由去掉1的状态f(i - 1, j - 1)转移而来；对于最小值大于1的情况，可以由每个数减去1的状态f(i - j, j)转移而来 f[i][j] = f[i-1, j-1] + f[i - j][j] 线性DP递推顺序是线性序列 数字三角形状态f(i, j) 表示从起点走到(i, j)的所有路径的集合 注意 i 表示水平方向，j表示左下倾斜方向，初始化时需要注意f[i][j+1]右哨兵也会被用到 1// f[i][j] = max(f[i-1][j-1], f[i-1][j]) + a[i][j] 最长上升子序列状态f(i) 表示以i结尾的所有上升子序列的集合 状态划分根据上一个数位置分类 1f[i] = max(f[j] + 1), j = 0, 1, 2,...,i-1 &amp;&amp; a[j] &lt; a[i] // TODO 优化 状态f(i)表示长度为i+1的上升子序列中末尾元素的最小值 由$O(n^2)$优化为$O(n\lg n)$ 最长公共子序列状态f(i, j) 表示s1[1..i]和s2[1..j]的所有公共子序列 状态划分根据s1[i]和s2[j]是否包含在子序列中分为四类： 1f[i, j] = max(f[i-1][j], f[i][j-1], f[i-1][j-1] + 1, f[i-1][j-1]); 编辑距离注意编辑距离的初始化 12345678910for (int i = 0; i &lt;= p; i++) f[i][0] = i;for (int j = 0; j &lt;= q; j++) f[0][j] = j;for (int i = 1; i &lt;= p; i++) for (int j = 1; j &lt;= q; j++) &#123; f[i][j] = min(f[i-1][j], f[i][j-1]) + 1; if (s1[i-1] == s2[j-1]) f[i][j] = min(f[i][j], f[i-1][j-1]); else f[i][j] = min(f[i][j], f[i-1][j-1] + 1); &#125; 区间DP状态表示某区间，递推通常先循环区间长度，再循环区间左起点 石子合并状态f(i, j)表示将第 i 堆到第 j 堆合并的所有合并方式中代价的最小值，因此每个区间的状态初始化为正无穷 状态划分根据最后一次合并的分界线的位置分类 123456789for (int len = 2; len &lt;= n; len++) for (int i = 1; i + len - 1 &lt;= n; i++) &#123; int l = i, r = i + len - 1; f[l][r] = 2e8; for (int k = l; k &lt; r; k++) &#123; int t = f[l][k] + f[k+1][r] + a[r] - a[l-1]; f[l][r] = min(f[l][r], t); &#125; &#125; 能量项链凸多边形的划分方案状态划分：根据[L, R]边所属的三角形的另一个顶点位置来划分 数位DP数位DP通常用于解决两个整数a，b之间存在多少满足某个条件的数（且条件与数字每一位有关）的问题。假设给定数x，包含n位，表示为$t_nt_{n-1}…t_1$，那么当我们求解n位数字$t_nt_{n-1}…t_1$的状态所对应的答案时就需重复计算n-1位数字$t_{n-1}t_{n-2}…t_1$的状态所对应的答案，因此具有重复子问题。考虑DP状态为dp(idx, tight, sum) 计数问题给定两个整数 a 和 b，求 a 和 b 之间的所有数字中x的出现次数，x属于0到9 count(int n, int x) 假设一个数为abcdefg，对1 &lt;= pppxqqq &lt;= abcdefg分类讨论： 如果ppp = 000 到 abc-1: 如果x不为0, qqq可以取000到999, cnt = abc * 1000 如果x为0, qqq可以取000到999, 但由于x为0,ppp不能为0只能从001到abc-1, cnt = (abc-1)* 1000 如果ppp = abc : d &lt; x, cnt = 0 d = x, qqq可以取000到efg, cnt = efg + 1 d &gt; x, qqq可以取000到999, cnt = 1000 12345678910111213141516171819202122232425262728293031323334353637383940414243444546int getNum(vector&lt;int&gt; &amp;nums, int l, int r) &#123; int res = 0; for (int i = l; i &gt;= r; i--) &#123; res = res * 10 + nums[i]; &#125; return res;&#125;int power10(int x) &#123; int res = 1; while (x--) &#123; res *= 10; &#125; return res;&#125;int count (int n, int x) &#123; if (!n) return 0; vector&lt;int&gt; nums; do &#123; nums.push_back(n % 10); n /= 10; &#125; while(n); n = nums.size(); int res = 0; for (int i = n - 1 - !x; i &gt;= 0; i--) &#123; if (i &lt; n - 1) &#123; res += getNum(nums, n-1, i+1) * power10(i); if (!x) res -= power10(i); &#125; if (nums[i] &gt; x) res += power10(i); if (nums[i] == x) res += getNum(nums, i-1, 0) + 1; &#125; return res;&#125;int main() &#123; int a, b; while (cin &gt;&gt; a &gt;&gt; b &amp;&amp; (a || b)) &#123; if (a &gt; b) swap(a, b); for (int i = 0; i &lt; 10; i++) &#123; cout &lt;&lt; count(b, i) - count(a-1, i) &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; &#125;&#125; 状态DP状态DP的初始化通常将不合法状态的f值初始化为正无穷或负无穷 不能偷窃相邻位置的偷盗最大值1234567891011121314151617181920const int N = 100001;int a[N], f[N][2];int main() &#123; int t; cin &gt;&gt; t; while (t--) &#123; int n; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; a[i]; &#125; f[0][0] = 0; f[0][1] = a[0]; for (int i = 1; i &lt; n; i++) &#123; f[i][0] = max(f[i-1][1], f[i-1][0]); f[i][1] = f[i-1][0] + a[i]; &#125; cout &lt;&lt; max(f[n-1][0], f[n-1][1]) &lt;&lt; endl; &#125;&#125; 股票买卖最多进行k次交易 状态压缩DP状态表示中的某一下标表示的是由状压state表示的集合 集合类 - 最短Hamilton路径状态f(i, j)表示从0走到j，走过的点的集合是i的二进制表示的所有路径的集合的路径长度的最小值 状态计算根据上一点的位置是0, 1,…, n-1划分 f[i][j] = min(f[i - {j}][k] + a[k][j]), k = 0, 1, 2,...,n-1 12345678910111213141516171819202122232425const int N = 20, M = 1 &lt;&lt; N;int a[N][N], f[M][N];int main() &#123; int n; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; n; j++) cin &gt;&gt; a[i][j]; memset(f, 0x3f, sizeof f); f[1][0] = 0; // f[i][j] 表示走过的点集合为i，走到点j的所有路径 // 根据上一点k的不同取法划分计算 f[i][j] = f[i - &#123;j&#125;][k] + a[k][j] for (int i = 0; i &lt; (1 &lt;&lt; n); i++) for (int j = 0; j &lt; n; j++) // 注意判断状态的合法性 if (i &gt;&gt; j &amp; 1) &#123; for (int k = 0; k &lt; n; k++) if (i &gt;&gt; k &amp; 1) &#123; f[i][j] = min(f[i][j], f[i - (1 &lt;&lt; j)][k] + a[k][j]); &#125; &#125; cout &lt;&lt; f[(1 &lt;&lt; n) - 1][n-1] &lt;&lt; endl;&#125; 棋盘类 - 骨牌的完美覆盖状态f(i, j)表示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263const int N = 12, M = 1 &lt;&lt; 12;long long f[N][M];bool st[M];bool check(int j, int k, int n) &#123; int x = j | k; int cnt = 0; // 下面做法错误，因为没有考虑二进制状态表示中前导0为奇数个的情况 // do &#123; // if (x % 2 == 0) cnt ++; // else &#123; // if (cnt &amp; 1) return false; // cnt = 0; // &#125; // x /= 2; // &#125; while(x); // if (cnt &amp; 1) return false; for (int i = 0; i &lt; n; i++) &#123; if (x &gt;&gt; i &amp; 1) &#123; if (cnt &amp; 1) return false; cnt = 0; &#125; else cnt ++; &#125; if (cnt &amp; 1) return false; return true;&#125;int main() &#123; int n, m; while (cin &gt;&gt; n &gt;&gt; m &amp;&amp; n || m) &#123; memset(f, 0, sizeof f); f[0][0] = 1; for (int j = 0; j &lt; (1 &lt;&lt; n); j++) &#123; int cnt = 0; st[j] = true; for (int i = 0; i &lt; n; i++) &#123; if (j &gt;&gt; i &amp; 1) &#123; if (cnt &amp; 1) &#123; st[j]=false; break; &#125; cnt = 0; &#125; else cnt ++; &#125; if (cnt &amp; 1) st[j] = false; &#125; for (int i = 1; i &lt;= m; i++) &#123; for (int j = 0; j &lt; (1 &lt;&lt; n); j++) &#123; for (int k = 0; k &lt; (1 &lt;&lt; n); k++) &#123; // j 和 k 同一位不都为1 // j 和 k 不能为连续奇数个0 if (!(j &amp; k) &amp;&amp; st[j | k]) &#123; f[i][j] += f[i-1][k]; &#125; &#125; &#125; &#125; cout &lt;&lt; f[m][0] &lt;&lt; endl; &#125;&#125; 树形DP没有上司的舞会]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Leetcode二叉树题目总结]]></title>
    <url>%2F2020%2F02%2F01%2Fbinary-tree%2F</url>
    <content type="text"><![CDATA[Leetcode二叉树常见题目： 重建二叉树递归版本 利用哈希数组记录中序遍历中每个值对应的位置 123456789101112131415161718unordered_map&lt;int,int&gt; pos;TreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) &#123; int n = preorder.size(); for (int i = 0; i &lt; n; i ++ ) pos[inorder[i]] = i; return dfs(preorder, inorder, 0, n - 1, 0, n - 1);&#125;TreeNode* dfs(vector&lt;int&gt;&amp;pre, vector&lt;int&gt;&amp;in, int pl, int pr, int il, int ir)&#123; if (pl &gt; pr) return NULL; int k = pos[pre[pl]] - il; TreeNode* root = new TreeNode(pre[pl]); root-&gt;left = dfs(pre, in, pl + 1, pl + k, il, il + k - 1); root-&gt;right = dfs(pre, in, pl + k + 1, pr, il + k + 1, ir); return root;&#125; 非递归版本 判定二叉搜索树后序序列的合法性注意dfs中[l,r]只包含一个元素的边界判断和子区间递归要剔除根节点 123456789101112131415vector&lt;int&gt; seq;bool verifySequenceOfBST(vector&lt;int&gt; sequence) &#123; seq = sequence; if (seq.size() == 0) return true; return dfs(0, seq.size() - 1);&#125;bool dfs(int l, int r) &#123; if (l &gt;= r) return true; int x = seq[r]; int k = l; while (k &lt; r &amp;&amp; seq[k] &lt; x) k++; for (int i = k; i &lt; r; i++) if (seq[i] &lt; x) return false; return dfs(l, k-1) &amp;&amp; dfs(k, r-1);&#125;&#125;; 二叉搜索树的第k个结点中序遍历的第k个节点，即第k小的结点 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ TreeNode *ans; TreeNode* kthNode(TreeNode* root, int k) { dfs(root, k); return ans; } void dfs(TreeNode *root, int &amp;k) { if (!k || !root) return; dfs(root-&gt;left, k); --k; if (!k) ans = root; else dfs(root-&gt;right, k); } 和为某一定值的二叉树路径DFS 1234567891011121314151617vector&lt;vector&lt;int&gt;&gt; ans;vector&lt;int&gt; path;vector&lt;vector&lt;int&gt;&gt; findPath(TreeNode* root, int sum) &#123; dfs(root, sum); return ans;&#125;void dfs(TreeNode* root, int sum) &#123; if (!root) return; path.push_back(root-&gt;val); sum -= root-&gt;val; if (!root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; !sum) ans.push_back(path); dfs(root-&gt;left, sum); dfs(root-&gt;right, sum); path.pop_back(); // sum值传递可以不恢复&#125; 判断对称二叉树 单队列迭代，相邻两个队列成员应该一致 用栈模拟递归，对根节点的左子树中序遍历；对根节点的右子树反中序遍历则两个子树互为镜像，当且仅当同时遍历两课子树时，对应节点的值相等 1234567891011121314151617181920bool isSymmetric(TreeNode* root) &#123; if (!root) return true; stack&lt;TreeNode*&gt; left, right; TreeNode *lc = root-&gt;left; TreeNode *rc = root-&gt;right; while(lc || rc || left.size()) &#123; while (lc &amp;&amp; rc) &#123; left.push(lc), right.push(rc); lc = lc-&gt;left, rc = rc-&gt;right; &#125; if (lc || rc) return false; lc = left.top(), rc = right.top(); left.pop(), right.pop(); if (lc-&gt;val != rc-&gt;val) return false; lc = lc-&gt;right, rc = rc-&gt;left; &#125; return true;&#125; 递归，除根节点外，任意两个子树互为镜像当且仅当： 两个子树的根节点值相等；第一棵子树的左子树和第二棵子树的右子树互为镜像，且第一棵子树的右子树和第二棵子树的左子树互为镜像 bool isSymmetric(TreeNode* root) { if (!root) return true; return dfs(root-&gt;left, root-&gt;right); } bool dfs(TreeNode* l, TreeNode* r) { if (!l || !r) return !l &amp;&amp; !r; return l-&gt;val == r-&gt;val &amp;&amp; dfs(l-&gt;right, r-&gt;left) &amp;&amp; dfs(l-&gt;left, r-&gt;right); } 二叉树的深度int treeDepth(TreeNode* root) { if (!root) return 0; return max(treeDepth(root-&gt;left), treeDepth(root-&gt;right)) + 1; } 平衡二叉树判定bool ans = true; bool isBalanced(TreeNode* root) { dfs(root); return ans; } int dfs(TreeNode *root) { if (!root) return 0; int left = dfs(root-&gt;left), right = dfs(root-&gt;right); if (abs(left - right) &gt; 1) ans = false; return max(left, right) + 1; } 二叉树的下一个结点1234567891011TreeNode* inorderSuccessor(TreeNode* p) &#123; if(!p) return NULL; if (p-&gt;right) &#123; p = p-&gt;right; while(p-&gt;left) p = p-&gt;left; return p; &#125; while(p-&gt;father &amp;&amp; p == p-&gt;father-&gt;right) p = p-&gt;father; return p-&gt;father;&#125; 生成镜像二叉树所有节点左右孩子互换 void mirror(TreeNode* root) { if (!root) return; swap(root-&gt;left, root-&gt;right); mirror(root-&gt;left); mirror(root-&gt;right); } 同构二叉树两个队列边遍历边比较 树的子结构暴力匹配 找到相同的根节点 同时遍历两颗树 代码分为两个部分： 遍历树A中的所有非空节点R；判断树A中以R为根节点的子树是不是包含和树B一样的结构，且我们从根节点开始匹配；对于第一部分，我们直接递归遍历树A即可，遇到非空节点后，就进行第二部分的判断。 对于第二部分，我们同时从根节点开始遍历两棵子树： 如果树B中的节点为空，则表示当前分支是匹配的，返回true；如果树A中的节点为空，但树B中的节点不为空，则说明不匹配，返回false；如果两个节点都不为空，但数值不同，则说明不匹配，返回false；否则说明当前这个点是匹配的，然后递归判断左子树和右子树是否分别匹配即可； bool hasSubtree(TreeNode* pRoot1, TreeNode* pRoot2) { if (!pRoot1 || !pRoot2) return false; if (isSame(pRoot1, pRoot2)) return true; return hasSubtree(pRoot1-&gt;left, pRoot2) || hasSubtree(pRoot1-&gt;right, pRoot2); } bool isSame(TreeNode* pRoot1, TreeNode* pRoot2) { if (!pRoot2) return true; if (!pRoot1 || pRoot1-&gt;val != pRoot2-&gt;val) return false; return isSame(pRoot1-&gt;left, pRoot2-&gt;left) &amp;&amp; isSame(pRoot1-&gt;right, pRoot2-&gt;right); } ##### 二叉树的花样遍历加层数 或更改结构体加上int layer; 按之字形顺序打印二叉树将根节点插入队列中；创建一个新队列，用来按顺序保存下一层的所有子节点；对于当前队列中的所有节点，按顺序依次将儿子插入新队列；按从左到右、从右到左的顺序交替保存队列中节点的值；重复步骤2-4，直到队列为空为止。 vector&lt;int&gt; get_val(vector&lt;TreeNode*&gt; level) { vector&lt;int&gt; res; for (auto &amp;u : level) res.push_back(u-&gt;val); return res; } vector&lt;vector&lt;int&gt;&gt; printFromTopToBottom(TreeNode* root) { vector&lt;vector&lt;int&gt;&gt;res; if (!root) return res; vector&lt;TreeNode*&gt;level; level.push_back(root); res.push_back(get_val(level)); bool zigzag = true; while (true) { vector&lt;TreeNode*&gt; newLevel; for (auto &amp;u : level) { if (u-&gt;left) newLevel.push_back(u-&gt;left); if (u-&gt;right) newLevel.push_back(u-&gt;right); } if (newLevel.size()) { vector&lt;int&gt;temp = get_val(newLevel); if (zigzag) reverse(temp.begin(), temp.end()); res.push_back(temp); level = newLevel; } else break; zigzag = !zigzag; } return res; } 分行打印二叉树 滚动数组 12345678910111213141516171819202122232425262728293031vector&lt;int&gt; get_val(vector&lt;TreeNode*&gt; level)&#123; vector&lt;int&gt; res; for (auto &amp;u : level) res.push_back(u-&gt;val); return res;&#125;vector&lt;vector&lt;int&gt;&gt; printFromTopToBottom(TreeNode* root) &#123; vector&lt;vector&lt;int&gt;&gt;res; if (!root) return res; vector&lt;TreeNode*&gt;level; level.push_back(root); res.push_back(get_val(level)); while (true) &#123; vector&lt;TreeNode*&gt; newLevel; for (auto &amp;u : level) &#123; if (u-&gt;left) newLevel.push_back(u-&gt;left); if (u-&gt;right) newLevel.push_back(u-&gt;right); &#125; if (newLevel.size()) &#123; res.push_back(get_val(newLevel)); level = newLevel; &#125; else break; &#125; return res;&#125; 在每行末尾添加null标记 123456789101112131415161718192021222324vector&lt;vector&lt;int&gt;&gt; printFromTopToBottom(TreeNode* root) &#123; vector&lt;vector&lt;int&gt;&gt; res; if (!root) return res; queue&lt;TreeNode*&gt; que; que.push(root); que.push(nullptr); vector&lt;int&gt; level; while(que.size()) &#123; auto p = que.front(); que.pop(); if (!p) &#123; if (level.empty()) break; res.push_back(level); level.clear(); que.push(nullptr); &#125; else &#123; level.push_back(p-&gt;val); if (p-&gt;left) que.push(p-&gt;left); if (p-&gt;right) que.push(p-&gt;right); &#125; &#125; return res;&#125; 序列化二叉树 二叉搜索树与双向链表 #####]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[算法模版-初级篇]]></title>
    <url>%2F2019%2F12%2F31%2Falgo-template1%2F</url>
    <content type="text"><![CDATA[目录 二分 归并排序 快速排序&amp;快速选择 堆 双指针/尺取法 单调栈/单调队列 递归/DFS BFS 并查集 位运算 高精度 初级数论 二分二分本质不是单调性，只需要区间针对某个性质能够分成两段，一段满足一段不满足即可。 找到能够划分区间左右两半的性质，如果if (check(mid)) 条件成立，判断答案在左区间还是右区间，如果答案在左区间并且mid也可能是答案，按模板1来划分；如果答案在右区间并且mid也可能是答案，按模板2来划分。 模板1mid使用下中位数，模板2使用下中位数+1，终结条件为$low==high$，注意区间左右均为闭区间 版本1最大值最小问题，第一个&gt;=target的元素区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用，其更新操作是r = mid或者l = mid + 1。计算mid时不需要加1。 123456789101112int bsearch_1(int l, int r)&#123; while (l &lt; r) &#123; // 两个int相加减会溢出 中间加个长整型常量 int mid = l + 0ll + r &gt;&gt; 1; // 第一个大于等于key的数 if (a[mid] &gt;= key) if (check(mid)) r = mid; else l = mid + 1; &#125; return l;&#125; 版本2最小值最大问题，最后一个&lt;= target的元素区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用，其更新操作是r = mid - 1或者l = mid。因为r更新为mid-1，如果mid仍然计算下取整，则l和r差1时大者永远取不到，会死循环，因此计算mid时需要加1。 1234567891011int bsearch_2(int l, int r)&#123; while (l &lt; r) &#123; int mid = l + 1ll + r &gt;&gt; 1; // 最后一个小于等于key的数 if (a[mid] &lt;= key) if (check(mid)) l = mid; else r = mid - 1; &#125; return l;&#125; 浮点数二分 注意while判断条件考虑浮点误差应为while (r - l &gt; eps) 1234567891011double bsearch_3(double l, double r)&#123; const double eps = 1e-6; // eps 表示精度，取决于题目对精度的要求 while (r - l &gt; eps) &#123; double mid = (l + r) / 2; if (check(mid)) r = mid; else l = mid; &#125; return l;&#125; 双指针利用单调性：i，j两指针保持相同的移动方向 常见题型： 单数组 - 满足条件的连续子序列 两数组 - 关键是确定两指针的单向移动方向 12345for (int i = 0, j = 0; i &lt; n; i++) &#123; while(j &lt; i &amp;&amp; check(i, j)) j++; // 具体逻辑&#125; 最长连续不重复子序列注意check的条件是cnt[a[i]]意味着只需要检查新加入的最右端元素的出现次数 1234567891011121314151617const int N = 100010;int a[N], cnt[N];int main() &#123; int n; cin &gt;&gt; n; for (int i = 0; i &lt; n ;i++) &#123; cin &gt;&gt; a[i]; &#125; int res = 0; for (int i = 0, j = 0; i &lt; n; i++) &#123; cnt[a[i]]++; while(j &lt; i &amp;&amp; cnt[a[i]] &gt; 1) cnt[a[j++]]--; res = max(res, i - j + 1); &#125; cout &lt;&lt; res &lt;&lt; endl;&#125; 单调栈单调性：元素下标i &lt; j 但元素值 a[i] &gt; a[j]时，a[j]必定有更长的生命周期，a[i]可被删除，因此最终栈内元素始终单调递增 求数组每个元素左边第一个比它小/大的元素12345int hh = 0;for (int i = 0; i &lt; n; i++) &#123; while (hh &gt; 0 &amp;&amp; stk[hh] &gt;= a[i]) hh--; stk[++hh] = a[i]; // 注意区分栈中存放下标还是元素值&#125; 单调队列12345678int hh = 0, tt = -1;for (int i = 0; i &lt; n; i++) &#123; // 队头滑出 while(hh &lt;= tt &amp;&amp; check_out(hh, i)) hh++; // 队尾保持单调性 while(hh &lt;= tt &amp;&amp; check(tt, i)) tt--; q[++tt] = i; //注意区分队列中存放下标还是元素值&#125; 滑动窗口的最小值12345678910int hh = 0, tt = -1;for (int i = 0; i &lt; n; i++) &#123; // 下标间隔判断不是队列本身，而是队头和当前元素i的下标距离 while(hh &lt;= tt &amp;&amp; i - q[hh] + 1 &gt; k) hh++; while(hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt--; q[ ++ tt] = i; if (i &gt;= k - 1) cout &lt;&lt; a[q[hh]] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl; 归并排序数组归并排序 注意合并时所需额外空间的处理 vector&lt;int&gt; tmp(r - l + 1); 12345678910111213141516void mergeSort(vector&lt;int&gt;&amp; a, int l, int r) &#123; if (l &gt;= r) return; int mid = l + r &gt;&gt; 1; mergeSort(a, l, mid); mergeSort(a, mid + 1, r); vector&lt;int&gt; tmp(r - l + 1); int k = 0, i = l, j = mid + 1; while (i &lt;= mid &amp;&amp; j &lt;= r) &#123; if (a[i] &lt;= a[j]) tmp[k++] = a[i++]; else tmp[k++] = a[j++]; &#125; while(i &lt;= mid) tmp[k++] = a[i++]; while(j &lt;= r) tmp[k++] = a[j++]; for (int i = l, j = 0; i &lt;= r; i++, j++) a[i] = tmp[j];&#125; 合并两个有序链表12345678910111213141516171819202122232425262728293031struct ListNode &#123; int val; ListNode* next;&#125;;ListNode* mergeList(ListNode* l1, ListNode* l2) &#123; ListNode* dummy = new ListNode(-1); ListNode* cur = dummy; while(l1 &amp;&amp; l2) &#123; if (l1-&gt;val &lt;= l2-&gt;val) &#123; cur-&gt;next = l1; l1 = l1-&gt;next; cur = cur-&gt;next; &#125; else &#123; cur-&gt;next = l2; l2 = l2-&gt;next; cur = cur-&gt;next; &#125; &#125; while(l1) &#123; cur-&gt;next = l1; l1 = l1-&gt;next; cur = cur-&gt;next; &#125; while(l2) &#123; cur-&gt;next = l2; l2 = l2-&gt;next; cur = cur-&gt;next; &#125; return dummy-&gt;next;&#125; 合并k个有序链表分治或最小堆 链表归并排序逆序对的数量分治：构成逆序对的两个数同在分治后的左侧区间或右侧区间，或者分别位于左右两个区间需要在归并时计算 归并计算逆序对：对右侧区间的每个数计算左侧区间中大于它的数的个数，最后全部求和 123456789101112131415161718192021222324long long mergeSort(int l, int r) &#123; if (l &gt;= r) return 0; int mid = l + r &gt;&gt; 1; long long res = mergeSort(l, mid) + mergeSort(mid + 1, r); int k = 0, i = l, j = mid + 1; vector&lt;int&gt; tmp(r - l + 1); while (i &lt;= mid &amp;&amp; j &lt;= r) &#123; if (a[i] &lt;= a[j]) tmp[k++] = a[i++]; else &#123; res += mid - i + 1; tmp[k++] = a[j++]; &#125; &#125; while(i &lt;= mid) tmp[k++] = a[i++]; while(j &lt;= r) tmp[k++] = a[j++]; for (int i = l, j = 0; i &lt;= r; i++, j++) a[i] = tmp[j]; return res;&#125; 快速排序&amp;快速选择快速排序 $O(nlgn)$ 12345678910111213void qSort(int q[], int l, int r)&#123; if (l &gt;= r) return; // x选择q[l]或下中位数，递归子区间选[l, j], [j + 1, r] int i = l - 1, j = r + 1, x = q[l + r &gt;&gt; 1]; while (i &lt; j) &#123; do i ++ ; while (q[i] &lt; x); do j -- ; while (q[j] &gt; x); if (i &lt; j) swap(q[i], q[j]); &#125; qSort(q, l, j), qSort(q, j + 1, r);&#125; 快速选择$O(n)$ 1234567891011121314151617int qSelect(vector&lt;int&gt;&amp; a, int l, int r, int k) &#123; if (l == r) return a[l]; int x = a[l], i = l - 1, j = r + 1; while (i &lt; j) &#123; while(a[++ i] &lt; x); while(a[-- j] &gt; x); if (i &lt; j) &#123; swap(a[i], a[j]); &#125; &#125; int cnt = j - l + 1; if (cnt &gt;= k) return qSelect(a, l, j, k); else return qSelect(a, j + 1, r, k - cnt);&#125; 堆插入元素 右下插入 12heap[++size] = x;up(size); 删除堆顶 交换后删除右下元素 123heap[1] = heap[size];size--;down(1); 删除任一元素 1234heap[k] = heap[size];size--;down(k);up(k); $O(1)$时间建堆，数列错位相减可证明 123for (int i = n / 2; i; i--) &#123; down(i);&#125; 通用操作 123456789101112131415void down(int u) &#123; int t = u; if (u * 2 &lt;= size &amp;&amp; h[u * 2] &lt; h[t]) t = u * 2; if (u * 2 + 1 &lt;= size &amp;&amp; h[u * 2 + 1] &lt; h[t]) t = u * 2 + 1; if (u != t) &#123; swap(h[u], h[t]); down(t); &#125;&#125;void up(int u) &#123; while (u / 2 &amp;&amp; h[u] &lt; h[u / 2]) &#123; swap(h[u], h[u / 2]); u &gt;&gt;= 1; &#125;&#125; 最大堆 1priority_queue, greater &gt; que; 最小堆 1priority_queue que; 前k大的数快速选择算法 $O(n)$ + 排序$O(klgk)$ 123456789101112131415161718192021222324252627282930class Solution &#123;public: vector&lt;int&gt; qSelect(vector&lt;int&gt;&amp; a, int l, int r, int k) &#123; if (l == r) &#123; vector&lt;int&gt; res(a.begin(), a.begin()+l+1); return res; &#125; int x = a[l], i = l - 1, j = r + 1; while (i &lt; j) &#123; while(a[++ i] &lt; x); while(a[-- j] &gt; x); if (i &lt; j) &#123; swap(a[i], a[j]); &#125; &#125; int cnt = j - l + 1; if (cnt &gt;= k) return qSelect(a, l, j, k); else return qSelect(a, j + 1, r, k - cnt); &#125; vector&lt;int&gt; getLeastNumbers_Solution(vector&lt;int&gt; input, int k) &#123; int n = input.size(); if (!n) return &#123;&#125;; vector&lt;int&gt; res = qSelect(input, 0, n - 1, k); sort(res.begin(), res.end()); return res; &#125;&#125;; 最小堆（注意求前k大的数应该用最小堆）$O(nlgk)$ 1234567891011121314vector&lt;int&gt; getLeastNumbers_Solution(vector&lt;int&gt; input, int k) &#123; priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; heap; for (int i = 0; i &lt; input.size(); i++) &#123; heap.push(input[i]); if (heap.size() &gt; k) heap.pop(); &#125; vector&lt;int&gt; res; for (int i = 0; i &lt; k; i++) &#123; res.push_back(heap.top()); heap.pop(); &#125; reverse(res.begin(), res.end()); return res; &#125; 数据流的中位数维护一个最大堆来存放较小一半的数和一个最小堆来存放较大一半的树，保证两个堆的数目保持一致或最多差一，如果两堆顶逆序交换即可。 1234567891011121314151617181920priority_queue&lt;int&gt; maxHeap;priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; minHeap;void insert(int num)&#123; maxHeap.push(num); if (minHeap.size() &amp;&amp; minHeap.top() &lt; maxHeap.top()) &#123; auto p = minHeap.top(), q = maxHeap.top(); minHeap.pop(); maxHeap.pop(); minHeap.push(q); maxHeap.push(p); &#125; if (maxHeap.size() - minHeap.size() &gt; 1) &#123; minHeap.push(maxHeap.top()); maxHeap.pop(); &#125;&#125;double getMedian()&#123; if (maxHeap.size() + minHeap.size() &amp; 1) return maxHeap.top(); else return (maxHeap.top() + minHeap.top()) / 2.0; &#125; 递归/DFS空间复杂度 $O(最大递归深度)$ DFS回溯需要恢复状态主要是考虑每次枚举状态转移时当前起始点应保持一致，如果枚举导致其发生变化则需要恢复起始状态 DFS的搜索顺序：不重不漏地枚举所有状态的顺序 指数枚举 $O(2^n)$1234567891011121314151617181920212223// 递归 状态压缩void dfs(int u, int state) &#123; if (u == n) &#123; for (int i = 0; i &lt; n; i++) &#123; if (state &gt;&gt; i &amp; 1) &#123; cout &lt;&lt; i + 1 &lt;&lt; &quot; &quot;; &#125; &#125; cout &lt;&lt; endl; return; &#125; dfs(u + 1, state); dfs(u + 1, state | 1 &lt;&lt; u);&#125;// 递推 状态压缩int n;for (int state = 0; state &lt; 1 &lt;&lt; n; state++) &#123; for (int j = 0; j &lt; n; j++) &#123; if (state &gt;&gt; j &amp; 1) cout &lt;&lt; j + 1 &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125; 组合枚举 $O(C^k_n)$枚举每个数是否被选中，增加选择k个数的限制条件，为避免组合型枚举重复枚举，人为指定顺序按顺序枚举 1234567891011121314151617181920212223242526272829303132333435363738// 递归int n, m;vector&lt;int&gt; path;void dfs(int u, int num) &#123; if (num + n - u &lt; m) &#123; return; &#125; if (num == m) &#123; for(int i = 0; i &lt; m; i++) &#123; cout &lt;&lt; path[i] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; return; &#125; path.push_back(u+1); dfs(u+1, num+1); path.pop_back(); dfs(u+1, num);&#125;// 组合与顺序无关，使用state状态压缩代替pathvoid dfs(int u, int num, int state) &#123; if (num + n - u &lt; m) &#123; return; &#125; if (num == m) &#123; for(int i = 0; i &lt; n; i++) &#123; if (state &gt;&gt; i &amp; 1) cout &lt;&lt; i + 1 &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; return; &#125; dfs(u + 1, num + 1, state | 1 &lt;&lt; u); dfs(u + 1, num, state);&#125;// 非递归栈模拟 排列枚举 $O(n!)$12345678910111213141516171819int n;vector&lt;int&gt; path;void dfs(int u, int visited) &#123; if (u == n) &#123; for (int i = 0; i &lt; n; i++) &#123; cout &lt;&lt; path[i] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; return; &#125; for (int i = 0; i &lt; n; i++) &#123; if (!(visited &gt;&gt; i &amp; 1)) &#123; path.push_back(i + 1); dfs(u + 1, visited | 1 &lt;&lt; i); path.pop_back(); &#125; &#125;&#125; 123456789101112131415161718192021222324252627class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; ans; vector&lt;int&gt; path; vector&lt;vector&lt;int&gt;&gt; permutation(vector&lt;int&gt;&amp; nums) &#123; sort(nums.begin(), nums.end()); path.resize(nums.size()); dfs(nums, 0, 0, 0); return ans; &#125; void dfs(vector&lt;int&gt;&amp; nums, int u, int start, int state) &#123; if (u == nums.size()) &#123; ans.push_back(path); return; &#125; if (!u || nums[u] != nums[u-1]) start = 0; for (int i = start; i &lt; nums.size(); i++) &#123; if (!(state &gt;&gt; i &amp; 1)) &#123; path[i] = nums[u]; dfs(nums, u+1, i+1, state | 1 &lt;&lt; i); &#125; &#125; &#125;&#125;; 不同的枚举顺序 枚举每一个位置 i , 用state确定位置 i 是否用过，在每个位置上都尝试填数组第u个数 带返回值的DFS字符串迷宫 1234567891011121314151617181920212223bool hasPath(vector&lt;vector&lt;char&gt;&gt;&amp; matrix, string str) &#123; for (int i = 0; i &lt; matrix.size(); i ++ ) for (int j = 0; j &lt; matrix[i].size(); j ++ ) if (dfs(matrix, str, 0, i, j)) return true; return false;&#125;bool dfs(vector&lt;vector&lt;char&gt;&gt; &amp;matrix, string &amp;str, int u, int x, int y) &#123; if (matrix[x][y] != str[u]) return false; if (u == str.size() - 1) return true; int dx[4] = &#123;-1, 0, 1, 0&#125;, dy[4] = &#123;0, 1, 0, -1&#125;; char t = matrix[x][y]; matrix[x][y] = &apos;*&apos;; for (int i = 0; i &lt; 4; i ++ ) &#123; int a = x + dx[i], b = y + dy[i]; if (a &gt;= 0 &amp;&amp; a &lt; matrix.size() &amp;&amp; b &gt;= 0 &amp;&amp; b &lt; matrix[a].size()) &#123; if (dfs(matrix, str, u + 1, a, b)) return true; &#125; &#125; matrix[x][y] = t; return false;&#125; BFS时间复杂度 $O(状态数*转移方式)$ 空间复杂度 $O(状态数)$ 最短距离模型迷宫起点到终点的最少步数1234567891011121314151617181920212223242526272829303132const int INF = 1e8;typedef pair&lt;int, int&gt; PII;queue&lt;PII&gt; que;char maze[N][M];int d[N][M];int dx[4] = &#123;1, 0, -1, 0&#125;;int dy[4] = &#123;0, 1, 0, -1&#125;;for (int i = 0; i &lt; n; i ++) &#123; for (int j = 0; j &lt; m; j++) &#123; d[i][j] = INF; &#125;&#125;int sx, sy, gx, gy;que.push(PII(sx, sy));d[sx][sy] = 0;while(!que.empty()) &#123; PII p = que.front(); que.pop(); if (p.first == gx &amp;&amp; p.second == gy) break; for (int i = 0; i &lt; 4; i++) &#123; int nx = p.first + dx[i]; int ny = p.second + dy[i]; if (nx &gt;= 0 &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; m &amp;&amp; maze[nx][ny] != &apos;#&apos; &amp;&amp; d[nx][ny] == INF) &#123; que.push(PII(nx, ny)); d[nx][ny] = d[p.first][p.second] + 1; &#125; &#125;&#125; Flood Fill/连通域计数DFS和BFS均可实现，可在线性时间找到某个点的连通块，但DFS数据较大可能会爆栈 湖泊计数 1234567891011121314151617181920212223242526272829303132333435363738typedef pair&lt;int, int&gt; PII;const int maxn = 100;int n,m;char field[maxn][maxn];int dx[8]=&#123;0,1,1,1,0,-1,-1,-1&#125;;int dy[8]=&#123;1,1,0,-1,-1,-1,0,1&#125;;void dfs(int sx,int sy)&#123; field[sx][sy]=&apos;.&apos;; for (int i = 0; i &lt; 8; i++) &#123; int nx = sx + dx[i]; int ny = sy + dy[i]; if (nx &gt;= 0 &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; m &amp;&amp; field[nx][ny]==&apos;W&apos;) dfs(nx, ny);//深度优先搜索无需在judge后标记节点，因为会递归调用；而bfs只调用一次 &#125;&#125;void bfs(int sx,int sy)&#123; queue&lt;P&gt; que; que.push(make_pair(sx, sy)); field[sx][sy]=&apos;.&apos;; while (!que.empty()) &#123; PII p = que.front(); que.pop(); for (int i = 0; i &lt; 8; i++) &#123; int nx = p.first + dx[i]; int ny = p.second + dy[i]; if (nx &gt;= 0 &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; m &amp;&amp; field[nx][ny]==&apos;W&apos;) &#123; que.push(make_pair(nx, ny)); field[nx][ny] = &apos;.&apos;; &#125; &#125; &#125;&#125; 最小步数模型棋盘整体从一个状态变换为另一状态所需的最小步数，状态表示通常使用字符串，距离使用哈希 e.x 八数码 （题目链接） 12345678910111213141516171819202122232425262728293031323334353637int bfs(string start) &#123; string end = &quot;12345678x&quot;; queue&lt;string&gt; que; unordered_map&lt;string, int&gt; d; que.push(start); d[start] = 0; while(que.size()) &#123; auto t = q.front(); q.pop(); int dist = d[t]; if (t == end) return dist; int dx[4] = &#123;-1, 0, 1, 0&#125;; int dy[4] = &#123;0, 1, 0, -1&#125;; int k = t.find(&apos;x&apos;); int x = k / 3, y = k % 3; for (int i = 0; i &lt; 4; i++) &#123; int nx = x + dx[i]; int ny = y + dy[i]; if (nx &gt;= 0 &amp;&amp; nx &lt; 3 &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; 3) &#123; swap(t[k], t[nx * 3 + b]); if (!d.count(t)) &#123; d[t] = dist + 1; que.push(t); &#125; swap(t[k], t[nx * 3 + b]); // 注意恢复状态 &#125; &#125; &#125; return -1;&#125; e.x 魔板（题目链接） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697char g[2][4];unordered_map&lt;string, int&gt; dist;unordered_map&lt;string, pair&lt;char, string&gt; &gt; pre;string get() &#123; string res; for (int i = 0; i &lt; 4; i++) res += g[0][i]; for (int i = 3; i &gt;= 0; i--) res += g[1][i]; return res;&#125;void set(string s) &#123; for (int i = 0; i &lt; 4; i++) g[0][i] = s[i]; for (int i = 4, j = 3; i &lt; 8; i++, j--) &#123; g[1][j] = s[i]; &#125;&#125;string move1(string s) &#123; set(s); for (int i = 0; i &lt; 4; i++) swap(g[0][i], g[1][i]); return get();&#125;string move2(string s) &#123; set(s); for (int i = 0; i &lt; 2; i++) &#123; char t = g[i][3]; for (int j = 2; j &gt;= 0; j--) g[i][j+1] = g[i][j]; g[i][0] = t; &#125; return get();&#125;string move3(string s) &#123; set(s); char t = g[0][1]; g[0][1] = g[1][1]; g[1][1] = g[1][2]; g[1][2] = g[0][2]; g[0][2] = t; return get();&#125;int bfs(string start, string end) &#123; if (start == end) return 0; queue&lt;string&gt; que; que.push(start); dist[start] = 0; while(!que.empty()) &#123; auto p = que.front(); que.pop(); string m[3]; m[0] = move1(p); m[1] = move2(p); m[2] = move3(p); for(int i = 0; i &lt; 3; i++) &#123; if (!dist.count(m[i])) &#123; dist[m[i]] = dist[p] + 1; pre[m[i]] = &#123;&apos;A&apos; + i, p&#125;; que.push(m[i]); if (m[i] == end) return dist[m[i]]; &#125; &#125; &#125; return -1;&#125;int main() &#123; string end; for (int i = 0; i &lt; 8; i++) &#123; int a; cin &gt;&gt; a; end += a + &apos;0&apos;; &#125; string start = &quot;12345678&quot;; int cnt = bfs(start, end); cout &lt;&lt; cnt &lt;&lt; endl; if (cnt &gt; 0) &#123; string res; string s = end; while (s != start) &#123; res += pre[s].first; s = pre[s].second; &#125; reverse(res.begin(), res.end()); cout &lt;&lt; res &lt;&lt; endl; &#125; return 0;&#125; 多源BFS矩阵各点到多个候选起点的最短距离 可假设一虚拟源点，将其与多个起点分别相连，则转换为单源BFS的最短距离，实际实现时只需要将多个起点在第一轮都加入队列即可 双端队列BFS适用于不同边权的情况 BFS优化双向广搜 A* 并查集静态连通性问题使用BFS/DFS，动态连通性问题使用并查集 按秩合并：增加树高rank数组，每次从rank小的树向rank大的树连边，避免退化 路径压缩：每次查询到根节点将该节点的parent直接连到根 对n个元素的并查集操作一次时间$O(α(n))$，$α$为阿克曼函数的反函数，比$O(lgn)$快。 1234567891011121314151617181920212223242526void init() &#123; vector&lt;int&gt; par(n); vector&lt;int&gt; rank(n, 0); for (int i = 0; i &lt; n; i++) &#123; par[i] = i; &#125;&#125;int find (int x, vector&lt;int&gt;&amp; par) &#123; return par[x] == x? x : par[x] = find(par[x], par);&#125;void unite(int x, int y, vector&lt;int&gt;&amp; par, vector&lt;int&gt;&amp; rank) &#123; x = find(x, par); y = find(y, par); if (x == y) return; else if (rank[x] &lt; rank[y]) &#123; par[x] = y; &#125; else &#123; par[y] = x; // x为根且高度需加1 if (rank[x] == rank[y]) rank[x]++; &#125; &#125; 边带权并查集根节点绑定集合元素的大小 每个元素绑定点到根节点的距离，适用于多分类的情况 扩展域并查集POJ1182 食物链 位运算取最靠右的一位1123int lowbit(int x) &#123; return x &amp; -x;&#125; 二进制中1的个数1234while(x) &#123; x -= lowbit(x); res++;&#125; 获取/设置右起第k位数1234// 获取第k位n &gt;&gt; k &amp; 1// 设置第k位为1n | 1 &lt;&lt; k 高精度高精度加法数据范围为数字位数而非数字本身，使用string读入，vector逆序存储便于进位 123456789101112131415161718192021222324252627282930vector&lt;int&gt; add(vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;b) &#123; if (a.size() &lt; b.size()) return add(b, a); int t = 0; vector&lt;int&gt; c; for (int i = 0; i &lt; a.size(); i++) &#123; t += a[i]; if (i &lt; b.size()) t += b[i]; c.push_back(t % 10); t /= 10; &#125; if (t) c.push_back(t); return c;&#125;int main() &#123; string a, b; cin &gt;&gt; a &gt;&gt; b; vector&lt;int&gt; A; vector&lt;int&gt; B; for (int i = a.size() - 1; i &gt;= 0; i--) A.push_back(a[i] - &apos;0&apos;); for (int i = b.size() - 1; i &gt;= 0; i--) B.push_back(b[i] - &apos;0&apos;); vector&lt;int&gt; C = add(A, B); reverse(C.begin(), C.end()); for (int i = 0; i &lt; C.size(); i++) &#123; cout &lt;&lt; C[i]; &#125; cout &lt;&lt; endl;&#125; 高精度减法负号的判定 cmp函数：依次判断长度和各个位置的数 减法进位的处理 123c.push_back((t + 10) % 10);if (t &lt; 0) t = 1;else t = 0; 先导0的去除，注意最后结果是0要保留一位0 while(c.size() &gt; 1 &amp;&amp; c.back() == 0) c.pop_back(); 12345678910111213141516171819202122232425262728293031323334353637383940414243444546bool cmp(vector&lt;int&gt; &amp; a, vector&lt;int&gt; &amp; b) &#123; if (a.size() != b.size()) return a.size() &gt; b.size(); for (int i = a.size() - 1; i &gt;= 0; i--) &#123; if (a[i] != b[i]) return a[i] &gt; b[i]; &#125; return true;&#125;vector&lt;int&gt; sub(vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;b) &#123; int t = 0; vector&lt;int&gt; c; for (int i = 0; i &lt; a.size(); i++) &#123; t = a[i] - t; if (i &lt; b.size()) t -= b[i]; c.push_back((t + 10) % 10); if (t &lt; 0) t = 1; else t = 0; &#125; while(c.size() &gt; 1 &amp;&amp; c.back() == 0) c.pop_back(); return c;&#125;int main() &#123; string a, b; cin &gt;&gt; a &gt;&gt; b; vector&lt;int&gt; A; vector&lt;int&gt; B; vector&lt;int&gt; C; for (int i = a.size() - 1; i &gt;= 0; i--) &#123; A.push_back(a[i] - &apos;0&apos;); &#125; for (int i = b.size() - 1; i &gt;= 0; i--) &#123; B.push_back(b[i] - &apos;0&apos;); &#125; if (cmp(A, B)) C = sub(A, B); else &#123; C = sub(B, A); cout &lt;&lt; &quot;-&quot;; &#125; for (int i = C.size() - 1; i &gt;= 0; i--) &#123; cout &lt;&lt; C[i]; &#125; cout &lt;&lt; endl;&#125; 高精度乘法高精度乘整数 12345678910vector&lt;int&gt; mul(vector&lt;int&gt; &amp;a, int b) &#123; vector&lt;int&gt; c; int t = 0; for (int i = 0; i &lt; a.size() || t; i++) &#123; if (i &lt; a.size()) t += a[i] * b; c.push_back(t % 10); t /= 10; &#125; return c;&#125; 高精度乘高精度 123456789101112131415161718vector&lt;int&gt; mul(vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;b) &#123; vector&lt;int&gt; res(alen + blen, 0); // i*j存放i+j for (int i = 0; i &lt; alen; i++) &#123; for (int j = 0; j &lt; blen; j++) &#123; res[i + j] += a[i] * b[j]; &#125; &#125; int t = 0; for (int i = 0; i &lt; (int)res.size(); i++) &#123; t += res[i]; res[i] = t % BASE; t /= BASE; &#125; while (res.size() &gt; 1 &amp;&amp; res.back() == 0) &#123; res.pop_back(); &#125;&#125; 高精度除法高精度除整数 123456789101112vector&lt;int&gt; div(vector&lt;int&gt; &amp;a, int b, int &amp;r) &#123; vector&lt;int&gt; c; r = 0; for (int i = a.size() - 1; i &gt;= 0; i--) &#123; r = r * 10 + a[i]; c.push_back(r / b); r %= b; &#125; reverse(c.begin(), c.end()); while(c.size() &gt; 1 &amp;&amp; c.back() == 0) c.pop_back(); return c;&#125; 初级数论辗转相除法最大公约数时间复杂度 $O(\lg max(a,b))$ 123int gcd(int a, int b) &#123; return b ? gcd(b, a % b) : a;&#125; 最大公倍数123int lcm(int a, int b) &#123; return a * b / gcd(a, b);&#125; 扩展欧几里得算法求x, y整数，使得ax + by = gcd(a, b)，时间复杂度 $O(\lg max(a,b))$ 裴蜀定理有任意正整数a, b，gcd（a，b）= d，那么对于任意的整数x，y，ax+by都一定是d的倍数，特别地，一定存在整数x，y，使ax+by=d成立。推论a,b互素的充要条件是存在整数x，y使ax+by=1 123456789int exgcd(int a, int b, int &amp;x, int &amp;y) &#123; if (!b) &#123; x = 1, y = 0; return a; &#125; int d = exgcd(b, a % b, y, x); y -= a / b * x; return d;&#125; 素数素数判定 / 试除法试除法实现素数判定、约数枚举、整数分解的时间复杂度均为 $O(\sqrt n)$ 1234567bool isPrime(int x) &#123; if (x &lt; 2) return false; for (int i = 2; i &lt;= x / i; i++) &#123; if (x % i == 0) return false; &#125; return true;&#125; 约数枚举 12345678910vector&lt;int&gt; divisor(int x) &#123; vector&lt;int&gt; res; for (int i = 2; i &lt;= x / i; i++) &#123; if (x % i == 0) &#123; res.push_back(i); if (i != x / i) res.push_back(x / i); &#125; &#125; return res;&#125; 整数分解 1234567891011map&lt;int, int&gt; prime_factor(int x) &#123; map&lt;int, int&gt; res; for (int i = 2; i &lt;= x / i; i++) &#123; while(x % i == 0) &#123; res[i]++; x /= i; &#125; &#125; if (x != 1) res[x] = 1; return res;&#125; 素数筛法埃氏筛法 时间复杂度 $O(n \lg n lg n)$ 12345678910111213int prime[N];int st[N];int sieve(int n) &#123; int p = 0; for (int i = 2; i &lt;= n; i++) &#123; if (st[i]) continue; prime[p++] = i; for (int j = i; j &lt;= n; j += i) st[j] = true; &#125; return p;&#125; 快速幂求$a^k\mod p$的值，反复平方法 时间复杂度 $O(\lg k)$ 预处理出 $a^{2^0} \mod p$, $a^{2^1} \mod p$, $a^{2^2} \mod p$,…, $a^{2^{lgk}} \mod p$的值（反复平方k次），然后根据底数不变指数相加，将k拆分为若干个2的次幂之和，则可以根据k的二进制形式将预处理的值按需相乘 1234567891011typedef long long LL;ll mod_pow(ll a, ll k, ll p) &#123; ll res = 1; while (k) &#123; if (k &amp; 1) res = res * a % p; a = a * a % p; k &gt;&gt;= 1; &#125; return res;&#125;]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Leetcode链表题目总结]]></title>
    <url>%2F2019%2F03%2F25%2Flinked-list%2F</url>
    <content type="text"><![CDATA[Leetcode链表题常用方法总结： dummy node 常用于链表的head可能被修改或删除的情况，可简化单链表没有前向指针所带来的问题，通常使用current = dummy进行遍历，最终返回 dummy-&gt;next 链表中尽量避免new新的节点，而是在原链表上直接操作地址 在插入和删除操作中使用临时变量来存储next指针 反转链表通常需要使用pre指针记录前驱节点 通过两个指针几何变换来解决链表长度、环检测等问题 对于一些依赖后面节点才能完成的操作，通常使用递归来解决 常见题目： 从尾到头打印链表反向迭代器rbegin(), rend()，栈，递归 12345678vector&lt;int&gt; printListReversingly(ListNode* head) &#123; vector&lt;int&gt; res; while (head) &#123; res.push_back(head-&gt;val); head = head-&gt;next; &#125; return vector&lt;int&gt;(res.rbegin(), res.rend());&#125; O(1)时间删除节点替换下一节点的值，直接删除下一个节点 尾节点只能从头遍历 1234void deleteNode(ListNode* node) &#123; node-&gt;val = node-&gt;next-&gt;val; node-&gt;next = node-&gt;next-&gt;next;&#125; 删除重复节点123456789101112131415ListNode* deleteDuplication(ListNode* head) &#123; auto dummy = new ListNode(-1); dummy-&gt;next = head; auto p = dummy; while (p-&gt;next) &#123; auto q = p-&gt;next; while (q &amp;&amp; p-&gt;next-&gt;val == q-&gt;val) q = q-&gt;next; if (p-&gt;next-&gt;next == q) p = p-&gt;next; else p-&gt;next = q; &#125; return dummy-&gt;next;&#125; 倒数第k个节点12345678ListNode* findKthToTail(ListNode* head, int k) &#123; int n = 0; for (auto p = head; p; p = p-&gt;next) n ++ ; if (n &lt; k) return nullptr; auto p = head; for (int i = 0; i &lt; n - k; i ++ ) p = p-&gt;next; return p;&#125; 反转链表1234567891011ListNode* reverseList(ListNode* head) &#123; ListNode* pre = NULL; ListNode* cur = head; while (cur) &#123; ListNode* next = cur-&gt;next; cur-&gt;next = pre; pre = cur; cur = next; &#125; return pre;&#125; 合并两个有序单链表1234567891011121314151617ListNode* merge(ListNode* l1, ListNode* l2) &#123; ListNode* dummy = new ListNode(-1); ListNode* cur = dummy; while (l1 &amp;&amp; l2) &#123; if (l1-&gt;val &lt;= l2 -&gt; val) &#123; cur-&gt;next = l1; cur = cur-&gt;next; l1 = l1-&gt;next; &#125; else &#123; cur-&gt;next = l2; cur = cur-&gt;next; l2 = l2-&gt;next; &#125; &#125; cur-&gt;next = (l1 == NULL ? l2 : l1); return dummy-&gt;next;&#125; 链表归并排序两个链表的第一个公共节点假设公共部分长度为c，两个链表同时走a+b+c步，a + c + b = b + c + a，a走到头就转向b， b走到头转向a，则在公共部分相遇 12345678910ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) &#123; ListNode *p = headA, *q = headB; while (p != q) &#123; if (p) p = p-&gt;next; else p = headB; if (q) q = q-&gt;next; else q = headA; &#125; return p;&#125; 链表环的入口两指针一快一满，快指针以两倍速度行走，必定相遇在环内 相遇点单步遍历直至回到相同位置，可得环的长度n 两指针重新从头部以相同速度行走，一指针先走n步，两指针相遇位置即环的入口 12345678910111213141516171819202122232425ListNode *entryNodeOfLoop(ListNode *head) &#123; if (!head || !head-&gt;next) return 0; ListNode *first = head, *second = head; while (first &amp;&amp; second) &#123; first = first-&gt;next; second = second-&gt;next; if (second) second = second-&gt;next; else return 0; if (first == second) &#123; first = head; while (first != second) &#123; first = first-&gt;next; second = second-&gt;next; &#125; return first; &#125; &#125; return 0;&#125; 复杂链表的复制带random指针的listNode节点的复制 使用哈希表保存random指针的原节点和复制节点对应关系 在原链表上穿叉复制节点]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
</search>
