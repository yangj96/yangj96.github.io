<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[剑指Offer题目总结]]></title>
    <url>%2F2020%2F02%2F21%2Fjianzhi%2F</url>
    <content type="text"><![CDATA[旋转数组的最小数字二分，注意处理单调递增和存在多个相同元素的情况，例如1，0，1，1，1 123456789101112131415161718class Solution &#123;public: int findMin(vector&lt;int&gt;&amp; a) &#123; int n = a.size(); if (n == 0) return -1; while (n &gt; 1 &amp;&amp; a[0] == a[n-1]) n--; if (a[0] &lt; a[n-1]) return a[0]; int x = a[0]; int l = 0, r = n - 1; while (l &lt; r) &#123; int mid = l + r &gt;&gt; 1; if (a[mid] &lt; x) r = mid; else l = mid + 1; &#125; return a[l]; &#125;&#125;; 找到数组中的重复数字 置换法 12 下标对应元素个数二分 12 调整数组使奇数排在偶数前不要求保证原始稳定顺序的话可以使用双指针 1234567891011class Solution &#123;public: void reOrderArray(vector&lt;int&gt; &amp;a) &#123; int l = 0, r = a.size() -1; while (l &lt; r) &#123; while (l &lt; r &amp;&amp; a[l] % 2 == 1) l++; while (l &lt; r &amp;&amp; a[r] % 2 == 0) r--; if (l &lt; r) swap(a[l], a[r]); &#125; &#125;&#125;; 数组中出现次数超过一半的数字多数投票问题，Boyer-Moore Majority Vote Algorithm，时间复杂度为 O(N) 使用 cnt 来统计一个元素出现的次数，当遍历到的元素和统计元素相等时，令 cnt++，否则令 cnt–，当cnt为0时将统计元素置为当前元素并令cnt = 1。 如果前面查找了 i 个元素，且 cnt == 0，说明前 i 个元素没有 majority，或者有 majority，但是出现的次数少于 i / 2 ，因为如果多于 i / 2 的话 cnt 就一定不会为 0 。此时剩下的 n - i 个元素中，majority 的数目依然多于 (n - i) / 2，因此继续查找一定能找出 majority。 12 顺时针打印矩阵12345678910111213141516171819202122vector&lt;int&gt; printMatrix(vector&lt;vector&lt;int&gt; &gt; matrix) &#123; int n = matrix.size(); vector&lt;int&gt; res; if (n == 0) return res; int m = matrix[0].size(); int dx[4] = &#123;0, 1, 0, -1&#125;; int dy[4] = &#123;1, 0, -1, 0&#125;; int x = 0, y = 0, d = 0; vector&lt;vector&lt;bool&gt;&gt; st(n, vector&lt;bool&gt;(m, false)); for (int i = 0; i &lt; n * m; i++) &#123; res.push_back(matrix[x][y]); st[x][y] = true; int a = x + dx[d], b = y + dy[d]; if (a &lt; 0 || a &gt;= n || b &lt; 0 || b &gt;= m || st[a][b]) &#123; d = (d + 1) % 4; a = x + dx[d], b = y + dy[d]; &#125; x = a; y = b; &#125; return res;&#125; 斐波那契数列滚动数组递推 矩阵快速幂 剪绳子贪心+数学推导 dp 连续子数组的最大和12 从1到n整数中1出现的次数数位dp #####正则表示式匹配 状态表示：f[i][j]表示p从j开始到结尾，是否能匹配s从i开始到结尾状态转移： 如果p[j+1]不是*通配符： p[j]是正常字符，f[i][j] = s[i] == p[j] &amp;&amp; f[i+1][j+1] p[j]是.，f[i][j] = f[i+1][j+1]如果p[j+1]是星号通配符，f[i][j] = f[i][j+2] || ((s[i] == p[j] || p[j] == &#39;.&#39; ) &amp;&amp; f[i+1][j]) 1234567891011121314151617181920212223242526class Solution &#123;public: int n, m; string s, p; vector&lt;vector&lt;int&gt;&gt; f; bool isMatch(string _s, string _p) &#123; s = _s, p = _p; n = s.size(), m = p.size(); f = vector&lt;vector&lt;int&gt;&gt; (n+1, vector&lt;int&gt; (m+1, -1)); return dp(0, 0); &#125; bool dp (int i, int j) &#123; if (f[i][j] != -1) return f[i][j]; if (j == m) &#123; return f[i][j] = i == n; &#125; bool firstMatch = i &lt; n &amp;&amp; (s[i] == p[j] || p[j] == &apos;.&apos;); if (j + 1 &lt; m &amp;&amp; p[j+1] == &apos;*&apos;) &#123; f[i][j] = dp(i, j+2) || (firstMatch &amp;&amp; dp(i+1, j)); &#125; else &#123; f[i][j] = firstMatch &amp;&amp; dp(i+1, j+1); &#125; return f[i][j]; &#125;&#125;; 不用加减乘除实现加法扑克顺子]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[算法模版-中级篇]]></title>
    <url>%2F2020%2F02%2F03%2Falgo-template2%2F</url>
    <content type="text"><![CDATA[目录 双指针/尺取法 单调栈 单调队列 离散化 区间贪心问题 前缀和/差分 树状数组 线段树 图论 KMP Trie树 动态规划 双指针利用单调性：i，j两指针保持相同的移动方向 常见题型： 单数组 - 满足条件的连续子序列 两数组 - 关键是确定两指针的单向移动方向 12345for (int i = 0, j = 0; i &lt; n; i++) &#123; while(j &lt; i &amp;&amp; check(i, j)) j++; // 具体逻辑&#125; 最长连续不重复子序列注意check的条件是cnt[a[i]]意味着只需要检查新加入的最右端元素的出现次数 1234567891011121314151617const int N = 100010;int a[N], cnt[N];int main() &#123; int n; cin &gt;&gt; n; for (int i = 0; i &lt; n ;i++) &#123; cin &gt;&gt; a[i]; &#125; int res = 0; for (int i = 0, j = 0; i &lt; n; i++) &#123; cnt[a[i]]++; while(j &lt; i &amp;&amp; cnt[a[i]] &gt; 1) cnt[a[j++]]--; res = max(res, i - j + 1); &#125; cout &lt;&lt; res &lt;&lt; endl;&#125; 单调栈单调性：元素下标i &lt; j 但元素值 a[i] &gt; a[j]时，a[j]必定有更长的生命周期，a[i]可被删除，因此最终栈内元素始终单调递增 求数组每个元素左边第一个比它小/大的元素12345int hh = 0;for (int i = 0; i &lt; n; i++) &#123; while (hh &gt; 0 &amp;&amp; stk[hh] &gt;= a[i]) hh--; stk[++hh] = a[i]; // 注意区分栈中存放下标还是元素值&#125; 单调队列12345678int hh = 0, tt = -1;for (int i = 0; i &lt; n; i++) &#123; // 队头滑出 while(hh &lt;= tt &amp;&amp; check_out(hh, i)) hh++; // 队尾保持单调性 while(hh &lt;= tt &amp;&amp; check(tt, i)) tt--; q[++tt] = i; //注意区分队列中存放下标还是元素值&#125; 滑动窗口的最小值12345678910int hh = 0, tt = -1;for (int i = 0; i &lt; n; i++) &#123; // 下标间隔判断不是队列本身，而是队头和当前元素i的下标距离 while(hh &lt;= tt &amp;&amp; i - q[hh] + 1 &gt; k) hh++; while(hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i]) tt--; q[ ++ tt] = i; if (i &gt;= k - 1) cout &lt;&lt; a[q[hh]] &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl; 离散化待离散值排序、去重，然后二分求离散化对应坐标 单值离散化 1234567891011121314151617vector&lt;int&gt; all;sort(all.begin(), all.end());all.erase(unique(all.begin(), all.end()), all.end());// 待离散化值y-&gt;离散化后xint x = find(all.begin(), all.end(), y) - all.begin();// orint bs(int k) &#123; int l = 0, r = all.size() - 1; while(l &lt; r) &#123; int mid = l + r &gt;&gt; 1; if (all[mid] &gt;= k) r = mid; else l = mid + 1; &#125; return r + 1;&#125;int x = bs(y); 线段坐标离散化 1234567891011121314151617181920int compress(vector&lt;int&gt; &amp;x1, vector&lt;int&gt; &amp;x2, int w) &#123; vector&lt;int&gt; all; for (int i = 0; i &lt; x1.size(); i++) &#123; for (int d = -1; d &lt;= 1; d++) &#123; int tx1 = x1[i] + d, tx2 = x2[i] + d; if (tx1 &gt;= 1 &amp;&amp; tx1 &lt;= w) all.push_back(tx1); if (tx2 &gt;= 1 &amp;&amp; tx2 &lt;= w) all.push_back(tx2); &#125; &#125; sort(all.begin(), all.end()); all.erase(unique(all.begin(), all.end()), all.end()); for (int i = 0; i &lt; x1.size(); i++) &#123; x1[i] = find(all.begin(), all.end(), x1[i]) - all.begin(); x2[i] = find(all.begin(), all.end(), x2[i]) - all.begin(); &#125; return all.size();&#125; 区间贪心问题区间合并按区间左端点排序 12345678910111213141516171819void merge(vector&lt;PII&gt; &amp; segs) &#123; vector&lt;PII&gt; res; sort(segs.begin(), segs.end()); int st = -2e9, ed = -2e9; for(auto seg : segs) &#123; if (ed &lt; seg.first) &#123; if (st != -2e9) res.push_back(&#123;st, ed&#125;); st = seg.first; ed = seg.second; &#125; else ed = max(ed, seg.second); &#125; if (st != -2e9) &#123; res.push_back(&#123;st, ed&#125;); &#125; segs = res;&#125; 活动调度问题选取结束时间最早的活动 区间覆盖问题前缀和/差分一维前缀和为便于计算，下标从1开始 s[0] = a[0] = 0 s[i] = s[i-1] + a[i]; 求区间[l, r]元素和s[r] - s[l-1] 二维前缀和s[i][j] = s[i-1][j] + s[i][j-1] - s[i-1][j-1] + a[i][j] 求区间[(x1, y1), (x2, y2)]元素和s[x2][y2] - s[x1-1][y1] - s[x1][y1-1] + s[x1-1][y1-1] 一维差分123456789void modify(int l, int r, int c) &#123; b[l] += c; b[r+1] -= c;&#125;// 复原原矩阵更新后的值for (int i = 1; i &lt;= n; i++) &#123; b[i] += b[i-1];&#125; 二维差分12345678910111213141516const int N = 1005; // 注意数组从1开始且设计N+1，N至少要大于等于2 int b[N][N];void modify(int x1, int y1, int x2, int y2, int c) &#123; b[x1][y1] += c; b[x2+1][y1] -= c; b[x1][y2+1] -= c; b[x2+1][y2+1] += c;&#125;// 复原原矩阵更新后的值for (int i = 1; i &lt;= n; i++) &#123; for (int j = 1; j &lt;= m; j++) &#123; b[i][j] += b[i-1][j] + b[i][j-1] - b[i-1][j-1]; &#125;&#125; 树状数组线段树图论染色法判定二分图拓扑排序最短路问题最小生成树KMP字符串下标从1开始，next数组从0开始；字符串下标从0开始，next数组从-1开始 12345678910111213141516171819// 待匹配串s，模式串p，下标从1开始int n+1 = s.size();int m+1 = p.size();// 求next数组, next[1] = 0for (int i = 2, j = 0; i &lt;= m; i++) &#123; while(j &amp;&amp; p[i] != p[j+1]) j = ne[j]; if (p[i] == p[j+1]) j++; ne[i] = j;&#125;// kmp匹配for (int i = 1, j = 0; i &lt;= n; i++) &#123; while(j &amp;&amp; s[i] != p[j+1]) j = ne[j]; if (s[i] == p[j+1]) j++; if (j == m) &#123; j = ne[j]; // 匹配成功后的逻辑 &#125;&#125; Trie 树高效存储和查询字符串 时间复杂度$O(\log n)$，时间复杂度$O(n^2)$ 12345678910111213141516171819202122232425const int N = 100010;int son[N][26]; // Trie树每个节点的字节点，此处英文字母只包含26个小写字母int cnt[N];// 以当前这个点结尾的单词数量int idx; // 表示当前使用的层数下标，0号既是空节点也是Trie树的根节点void insert(string str) &#123; int p = 0; for (int i = 0; i &lt; str.size(); i++) &#123; int u = str[i] - 'a'; if (!son[p][u]) son[p][u] = ++idx; p = son[p][u]; &#125; cnt[p] ++;&#125;int query(string str) &#123; int p = 0; for (int i = 0; i &lt; str.size(); i++) &#123; int u = str[i] - 'a'; if (!son[p][u]) return 0; p = son[p][u]; &#125; return cnt[p];&#125; 动态规划 状态表示 f(i, j) 表示集合[i, j]的某一属性，例如集合中的最大值、最小值或数量 状态计算 根据集合的划分计算 时间复杂度：状态数目 * 状态转移方式 空间复杂度：子问题的个数 背包问题N个物品，体积为V的背包，每类物品体积为$v_i$，价值权重为$w_i$，求满足体积限制的背包的最大价值 01背包每类物品只能用一次 状态f(i, j) 表示从前i类物品中选，所选物品体积小于j的所有选法的集合中 价值最大选法的价值 12345678910111213f[0][0-V] = 0for (int i = 1; i &lt;= n; i++) for (int j = 0; j &lt;= m; j++) &#123; f[i][j] = f[i-1][j]; if (j &gt;= v[i]) f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i]); &#125;// 滚动数组优化，因为f中i只用到i-1且j只用到左侧j和j-v[i]，因此可用一维数组从大到小滚动优化f[0][0-V] = 0for (int i = 1; i &lt;= n; i++) for (int j = m; j &gt;= v[i]; j--) &#123; f[j] = max(f[j], f[j - v[i]] + w[i]); &#125; 完全背包每类物品可以使用无限次，与01背包的区别主要在于集合的划分变为$f[i, j] = f[i-1, j-v[i]k] + kw[i]$ 因此完全背包的状态计算可以优化为$f[i, j] = max(f[i-1, j], f[i, j-v[i]] + w[i])$，优化后可以使用滚动数组进一步简化为一维，和01背包只有j的计算顺序不同 多重背包每类物品有$s_i$个，与完全背包状态划分计算相同，只不过k由$s[i]$约束. 多重背包的优化 二进制拆分优化 由 $O(NS)$优化至$O(N\lg S)$ 分组背包每组物品只能选一个，状态f(i, j)的划分根据第i组物品选第k个来拆分计算 1// f[i][j] = max(f[i-1][j], f[i-1][j - v[i][k]] + w[i][k])k 计数DP方案数类初始化通常为f[0] = 1，因为空集也可以看作一种划分方案 整数划分方案数求1到n中任意个数之和为x的方案数 转换为完全背包问题，状态f(i, j)表示为从1-i个数中选择（每个数可选无数次）使得和恰好为j的方案数 状态计算f[i][j] = f[i-1][j] + f[i-1, j-i] + f[i-1][j-2*i] +... f[i][j] = f[i - 1][j] + f[i, j - i] 状态f(i, j)表示所有总和为i恰好表示为j个数之和的方案数，状态计算根据j个数的最小值是否为1划分，对于最小值为1的情况，可以由去掉1的状态f(i - 1, j - 1)转移而来；对于最小值大于1的情况，可以由每个数减去1的状态f(i - j, j)转移而来 f[i][j] = f[i-1, j-1] + f[i - j][j] 线性DP递推顺序是线性序列 数字三角形状态f(i, j) 表示从起点走到(i, j)的所有路径的集合 注意 i 表示水平方向，j表示左下倾斜方向，初始化时需要注意f[i][j+1]右哨兵也会被用到 1// f[i][j] = max(f[i-1][j-1], f[i-1][j]) + a[i][j] 最长上升子序列状态f(i) 表示以i结尾的所有上升子序列的集合 状态划分根据上一个数位置分类 1f[i] = max(f[j] + 1), j = 0, 1, 2,...,i-1 &amp;&amp; a[j] &lt; a[i] // TODO 优化 状态f(i)表示长度为i+1的上升子序列中末尾元素的最小值 由$O(n^2)$优化为$O(n\lg n)$ 最长公共子序列状态f(i, j) 表示s1[1..i]和s2[1..j]的所有公共子序列 状态划分根据s1[i]和s2[j]是否包含在子序列中分为四类： 1f[i, j] = max(f[i-1][j], f[i][j-1], f[i-1][j-1] + 1, f[i-1][j-1]); 编辑距离注意编辑距离的初始化 12345678910for (int i = 0; i &lt;= p; i++) f[i][0] = i;for (int j = 0; j &lt;= q; j++) f[0][j] = j;for (int i = 1; i &lt;= p; i++) for (int j = 1; j &lt;= q; j++) &#123; f[i][j] = min(f[i-1][j], f[i][j-1]) + 1; if (s1[i-1] == s2[j-1]) f[i][j] = min(f[i][j], f[i-1][j-1]); else f[i][j] = min(f[i][j], f[i-1][j-1] + 1); &#125; 区间DP状态表示某区间，递推通常先循环区间长度，再循环区间左起点 石子合并状态f(i, j)表示将第 i 堆到第 j 堆合并的所有合并方式中代价的最小值，因此每个区间的状态初始化为正无穷 状态划分根据最后一次合并的分界线的位置分类 123456789for (int len = 2; len &lt;= n; len++) for (int i = 1; i + len - 1 &lt;= n; i++) &#123; int l = i, r = i + len - 1; f[l][r] = 2e8; for (int k = l; k &lt;= r; k++) &#123; int t = f[i][k] + f[k+1][r] + a[r] - a[i-1]; f[i][r] = min(f[i][r], t); &#125; &#125; 数位DP数位DP通常用于解决两个整数a，b之间存在多少满足某个条件的数（且条件与数字每一位有关）的问题。假设给定数x，包含n位，表示为$t_nt_{n-1}…t_1$，那么当我们求解n位数字$t_nt_{n-1}…t_1$的状态所对应的答案时就需重复计算n-1位数字$t_{n-1}t_{n-2}…t_1$的状态所对应的答案，因此具有重复子问题。考虑DP状态为dp(idx, tight, sum) 计数问题给定两个整数 a 和 b，求 a 和 b 之间的所有数字中x的出现次数，x属于0到9 count(int n, int x) 假设一个数为abcdefg，对1 &lt;= pppxqqq &lt;= abcdefg分类讨论： 如果ppp = 000 到 abc-1: 如果x不为0, qqq可以取000到999, cnt = abc * 1000 如果x为0, qqq可以取000到999, 但由于x为0,ppp不能为0只能从001到abc-1, cnt = (abc-1)* 1000 如果ppp = abc : d &lt; x, cnt = 0 d = x, qqq可以取000到efg, cnt = efg + 1 d &gt; x, qqq可以取000到999, cnt = 1000 12345678910111213141516171819202122232425262728293031323334353637383940414243444546int getNum(vector&lt;int&gt; &amp;nums, int l, int r) &#123; int res = 0; for (int i = l; i &gt;= r; i--) &#123; res = res * 10 + nums[i]; &#125; return res;&#125;int power10(int x) &#123; int res = 1; while (x--) &#123; res *= 10; &#125; return res;&#125;int count (int n, int x) &#123; if (!n) return 0; vector&lt;int&gt; nums; do &#123; nums.push_back(n % 10); n /= 10; &#125; while(n); n = nums.size(); int res = 0; for (int i = n - 1 - !x; i &gt;= 0; i--) &#123; if (i &lt; n - 1) &#123; res += getNum(nums, n-1, i+1) * power10(i); if (!x) res -= power10(i); &#125; if (nums[i] &gt; x) res += power10(i); if (nums[i] == x) res += getNum(nums, i-1, 0) + 1; &#125; return res;&#125;int main() &#123; int a, b; while (cin &gt;&gt; a &gt;&gt; b &amp;&amp; (a || b)) &#123; if (a &gt; b) swap(a, b); for (int i = 0; i &lt; 10; i++) &#123; cout &lt;&lt; count(b, i) - count(a-1, i) &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; &#125;&#125; 状态DP状态DP的初始化通常将不合法状态的f值初始化为正无穷或负无穷 状态压缩DP状态表示中的某一下标表示的是由状压state表示的集合 最短Hamilton路径状态f(i, j)表示从0走到j，走过的点的集合是i的二进制表示的所有路径的集合的路径长度的最小值 状态计算根据上一点的位置是0, 1,…, n-1划分 f[i][j] = min(f[i - {j}][k] + a[k][j]), k = 0, 1, 2,...,n-1 12345678910111213141516171819202122232425const int N = 20, M = 1 &lt;&lt; N;int a[N][N], f[M][N];int main() &#123; int n; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; n; j++) cin &gt;&gt; a[i][j]; memset(f, 0x3f, sizeof f); f[1][0] = 0; // f[i][j] 表示走过的点集合为i，走到点j的所有路径 // 根据上一点k的不同取法划分计算 f[i][j] = f[i - &#123;j&#125;][k] + a[k][j] for (int i = 0; i &lt; (1 &lt;&lt; n); i++) for (int j = 0; j &lt; n; j++) // 注意判断状态的合法性 if (i &gt;&gt; j &amp; 1) &#123; for (int k = 0; k &lt; n; k++) if (i &gt;&gt; k &amp; 1) &#123; f[i][j] = min(f[i][j], f[i - (1 &lt;&lt; j)][k] + a[k][j]); &#125; &#125; cout &lt;&lt; f[(1 &lt;&lt; n) - 1][n-1] &lt;&lt; endl;&#125; 骨牌的完美覆盖状态f(i, j)表示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263const int N = 12, M = 1 &lt;&lt; 12;long long f[N][M];bool st[M];bool check(int j, int k, int n) &#123; int x = j | k; int cnt = 0; // 下面做法错误，因为没有考虑二进制状态表示中前导0为奇数个的情况 // do &#123; // if (x % 2 == 0) cnt ++; // else &#123; // if (cnt &amp; 1) return false; // cnt = 0; // &#125; // x /= 2; // &#125; while(x); // if (cnt &amp; 1) return false; for (int i = 0; i &lt; n; i++) &#123; if (x &gt;&gt; i &amp; 1) &#123; if (cnt &amp; 1) return false; cnt = 0; &#125; else cnt ++; &#125; if (cnt &amp; 1) return false; return true;&#125;int main() &#123; int n, m; while (cin &gt;&gt; n &gt;&gt; m &amp;&amp; n || m) &#123; memset(f, 0, sizeof f); f[0][0] = 1; for (int j = 0; j &lt; (1 &lt;&lt; n); j++) &#123; int cnt = 0; st[j] = true; for (int i = 0; i &lt; n; i++) &#123; if (j &gt;&gt; i &amp; 1) &#123; if (cnt &amp; 1) &#123; st[j]=false; break; &#125; cnt = 0; &#125; else cnt ++; &#125; if (cnt &amp; 1) st[j] = false; &#125; for (int i = 1; i &lt;= m; i++) &#123; for (int j = 0; j &lt; (1 &lt;&lt; n); j++) &#123; for (int k = 0; k &lt; (1 &lt;&lt; n); k++) &#123; // j 和 k 同一位不都为1 // j 和 k 不能为连续奇数个0 if (!(j &amp; k) &amp;&amp; st[j | k]) &#123; f[i][j] += f[i-1][k]; &#125; &#125; &#125; &#125; cout &lt;&lt; f[m][0] &lt;&lt; endl; &#125;&#125; 树形DP没有上司的舞会]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Leetcode二叉树题目总结]]></title>
    <url>%2F2020%2F02%2F01%2Fbinary-tree%2F</url>
    <content type="text"><![CDATA[Leetcode二叉树常见题目： 重建二叉树递归版本 利用哈希数组记录中序遍历中每个值对应的位置 非递归版本 判定二叉搜索树后序序列的合法性注意dfs中[l,r]只包含一个元素的边界判断和子区间递归要剔除根节点 123456789101112131415vector&lt;int&gt; seq;bool verifySequenceOfBST(vector&lt;int&gt; sequence) &#123; seq = sequence; if (seq.size() == 0) return true; return dfs(0, seq.size() - 1);&#125;bool dfs(int l, int r) &#123; if (l &gt;= r) return true; int x = seq[r]; int k = l; while (k &lt; r &amp;&amp; seq[k] &lt; x) k++; for (int i = k; i &lt; r; i++) if (seq[i] &lt; x) return false; return dfs(l, k-1) &amp;&amp; dfs(k, r-1);&#125;&#125;; 和为某一定值的二叉树路径DFS 1234567891011121314151617vector&lt;vector&lt;int&gt;&gt; ans;vector&lt;int&gt; path;vector&lt;vector&lt;int&gt;&gt; findPath(TreeNode* root, int sum) &#123; dfs(root, sum); return ans;&#125;void dfs(TreeNode* root, int sum) &#123; if (!root) return; path.push_back(root-&gt;val); sum -= root-&gt;val; if (!root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; !sum) ans.push_back(path); dfs(root-&gt;left, sum); dfs(root-&gt;right,sum); path.pop_back(); // sum值传递可以不恢复&#125; 树的子结构暴力匹配 找到相同的根节点 同时遍历两颗树 判断对称二叉树 单队列迭代，相邻两个队列成员应该一致 用栈模拟递归，对根节点的左子树中序遍历；对根节点的右子树反中序遍历则两个子树互为镜像，当且仅当同时遍历两课子树时，对应节点的值相等 1234567891011121314151617181920bool isSymmetric(TreeNode* root) &#123; if (!root) return true; stack&lt;TreeNode*&gt; left, right; TreeNode *lc = root-&gt;left; TreeNode *rc = root-&gt;right; while(lc || rc || left.size()) &#123; while (lc &amp;&amp; rc) &#123; left.push(lc), right.push(rc); lc = lc-&gt;left, rc = rc-&gt;right; &#125; if (lc || rc) return false; lc = left.top(), rc = right.top(); left.pop(), right.pop(); if (lc-&gt;val != rc-&gt;val) return false; lc = lc-&gt;right, rc = rc-&gt;left; &#125; return true;&#125; 递归，除根节点外，任意两个子树互为镜像当且仅当： 两个子树的根节点值相等；第一棵子树的左子树和第二棵子树的右子树互为镜像，且第一棵子树的右子树和第二棵子树的左子树互为镜像 生成镜像二叉树所有节点左右孩子互换 同构二叉树两个队列边遍历边比较 翻转二叉树二叉树的花样遍历加层数 或更改结构体加上int layer; 重建二叉树 树的子结构 二叉树的镜像 二叉树中和为某一值的路径 二叉搜索树与双向链表 二叉树的深度 平衡二叉树 二叉树的下一个结点1234567891011TreeNode* inorderSuccessor(TreeNode* p) &#123; if(!p) return NULL; if (p-&gt;right) &#123; p = p-&gt;right; while(p-&gt;left) p = p-&gt;left; return p; &#125; while(p-&gt;father &amp;&amp; p == p-&gt;father-&gt;right) p = p-&gt;father; return p-&gt;father;&#125; 059-按之字形顺序打印二叉树 分行打印二叉树 滚动数组 12345678910111213141516171819202122232425262728293031vector&lt;int&gt; get_val(vector&lt;TreeNode*&gt; level)&#123; vector&lt;int&gt; res; for (auto &amp;u : level) res.push_back(u-&gt;val); return res;&#125;vector&lt;vector&lt;int&gt;&gt; printFromTopToBottom(TreeNode* root) &#123; vector&lt;vector&lt;int&gt;&gt;res; if (!root) return res; vector&lt;TreeNode*&gt;level; level.push_back(root); res.push_back(get_val(level)); while (true) &#123; vector&lt;TreeNode*&gt; newLevel; for (auto &amp;u : level) &#123; if (u-&gt;left) newLevel.push_back(u-&gt;left); if (u-&gt;right) newLevel.push_back(u-&gt;right); &#125; if (newLevel.size()) &#123; res.push_back(get_val(newLevel)); level = newLevel; &#125; else break; &#125; return res;&#125; 在每行末尾添加null标记 123456789101112131415161718192021222324vector&lt;vector&lt;int&gt;&gt; printFromTopToBottom(TreeNode* root) &#123; vector&lt;vector&lt;int&gt;&gt; res; if (!root) return res; queue&lt;TreeNode*&gt; que; que.push(root); que.push(nullptr); vector&lt;int&gt; level; while(que.size()) &#123; auto p = que.front(); que.pop(); if (!p) &#123; if (level.empty()) break; res.push_back(level); level.clear(); que.push(nullptr); &#125; else &#123; level.push_back(p-&gt;val); if (p-&gt;left) que.push(p-&gt;left); if (p-&gt;right) que.push(p-&gt;right); &#125; &#125; return res;&#125; 序列化二叉树 二叉搜索树的第k个结点]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[算法模版-初级篇]]></title>
    <url>%2F2019%2F12%2F31%2Falgo-template1%2F</url>
    <content type="text"><![CDATA[目录 二分 递归/DFS BFS 并查集 归并排序 快速排序&amp;快速选择 堆 位运算 高精度 初级数论 二分二分本质不是单调性，只需要区间针对某个性质能够分成两段，一段满足一段不满足即可。 找到能够划分区间左右两半的性质，如果if (check(mid)) 条件成立，判断答案在左区间还是右区间，如果答案在左区间并且mid也可能是答案，按模板1来划分；如果答案在右区间并且mid也可能是答案，按模板2来划分。 模板1mid使用下中位数，模板2使用下中位数+1，终结条件为$low==high$，注意区间左右均为闭区间 版本1最大值最小问题，第一个&gt;=target的元素区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用，其更新操作是r = mid或者l = mid + 1。计算mid时不需要加1。 123456789101112int bsearch_1(int l, int r)&#123; while (l &lt; r) &#123; // 两个int相加减会溢出 中间加个长整型常量 int mid = l + 0ll + r &gt;&gt; 1; // 第一个大于等于key的数 if (a[mid] &gt;= key) if (check(mid)) r = mid; else l = mid + 1; &#125; return l;&#125; 版本2最小值最大问题，最后一个&lt;= target的元素区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用，其更新操作是r = mid - 1或者l = mid。因为r更新为mid-1，如果mid仍然计算下取整，则l和r差1时大者永远取不到，会死循环，因此计算mid时需要加1。 1234567891011int bsearch_2(int l, int r)&#123; while (l &lt; r) &#123; int mid = l + 1ll + r &gt;&gt; 1; // 最后一个小于等于key的数 if (a[mid] &lt;= key) if (check(mid)) l = mid; else r = mid - 1; &#125; return l;&#125; 浮点数二分 注意while判断条件考虑浮点误差应为while (r - l &gt; eps) 1234567891011double bsearch_3(double l, double r)&#123; const double eps = 1e-6; // eps 表示精度，取决于题目对精度的要求 while (r - l &gt; eps) &#123; double mid = (l + r) / 2; if (check(mid)) r = mid; else l = mid; &#125; return l;&#125; 递归/DFS空间复杂度 $O(最大递归深度)$ DFS回溯需要恢复状态主要是考虑每次枚举状态转移时当前起始点应保持一致，如果枚举导致其发生变化则需要恢复起始状态 DFS的搜索顺序：不重不漏地枚举所有状态的顺序 指数枚举 $O(2^n)$1234567891011121314151617181920212223// 递归 状态压缩void dfs(int u, int state) &#123; if (u == n) &#123; for (int i = 0; i &lt; n; i++) &#123; if (state &gt;&gt; i &amp; 1) &#123; cout &lt;&lt; i + 1 &lt;&lt; &quot; &quot;; &#125; &#125; cout &lt;&lt; endl; return; &#125; dfs(u + 1, state); dfs(u + 1, state | 1 &lt;&lt; u);&#125;// 递推 状态压缩int n;for (int state = 0; state &lt; 1 &lt;&lt; n; state++) &#123; for (int j = 0; j &lt; n; j++) &#123; if (state &gt;&gt; j &amp; 1) cout &lt;&lt; j + 1 &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl;&#125; 组合枚举 $O(C^k_n)$枚举每个数是否被选中，增加选择k个数的限制条件，为避免组合型枚举重复枚举，人为指定顺序按顺序枚举 1234567891011121314151617181920212223242526272829303132333435363738// 递归int n, m;vector&lt;int&gt; path;void dfs(int u, int num) &#123; if (num + n - u &lt; m) &#123; return; &#125; if (num == m) &#123; for(int i = 0; i &lt; m; i++) &#123; cout &lt;&lt; path[i] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; return; &#125; path.push_back(u+1); dfs(u+1, num+1); path.pop_back(); dfs(u+1, num);&#125;// 组合与顺序无关，使用state状态压缩代替pathvoid dfs(int u, int num, int state) &#123; if (num + n - u &lt; m) &#123; return; &#125; if (num == m) &#123; for(int i = 0; i &lt; n; i++) &#123; if (state &gt;&gt; i &amp; 1) cout &lt;&lt; i + 1 &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; return; &#125; dfs(u + 1, num + 1, state | 1 &lt;&lt; u); dfs(u + 1, num, state);&#125;// 非递归栈模拟 排列枚举 $O(n!)$12345678910111213141516171819int n;vector&lt;int&gt; path;void dfs(int u, int visited) &#123; if (u == n) &#123; for (int i = 0; i &lt; n; i++) &#123; cout &lt;&lt; path[i] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; return; &#125; for (int i = 0; i &lt; n; i++) &#123; if (!(visited &gt;&gt; i &amp; 1)) &#123; path.push_back(i + 1); dfs(u + 1, visited | 1 &lt;&lt; i); path.pop_back(); &#125; &#125;&#125; 123456789101112131415161718192021222324252627class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; ans; vector&lt;int&gt; path; vector&lt;vector&lt;int&gt;&gt; permutation(vector&lt;int&gt;&amp; nums) &#123; sort(nums.begin(), nums.end()); path.resize(nums.size()); dfs(nums, 0, 0, 0); return ans; &#125; void dfs(vector&lt;int&gt;&amp; nums, int u, int start, int state) &#123; if (u == nums.size()) &#123; ans.push_back(path); return; &#125; if (!u || nums[u] != nums[u-1]) start = 0; for (int i = start; i &lt; nums.size(); i++) &#123; if (!(state &gt;&gt; i &amp; 1)) &#123; path[i] = nums[u]; dfs(nums, u+1, i+1, state | 1 &lt;&lt; i); &#125; &#125; &#125;&#125;; 不同的枚举顺序 枚举每一个位置 i , 用state确定位置 i 是否用过，在每个位置上都尝试填数组第u个数 带返回值的DFS 1234567891011121314151617181920212223bool hasPath(vector&lt;vector&lt;char&gt;&gt;&amp; matrix, string str) &#123; for (int i = 0; i &lt; matrix.size(); i ++ ) for (int j = 0; j &lt; matrix[i].size(); j ++ ) if (dfs(matrix, str, 0, i, j)) return true; return false;&#125;bool dfs(vector&lt;vector&lt;char&gt;&gt; &amp;matrix, string &amp;str, int u, int x, int y) &#123; if (matrix[x][y] != str[u]) return false; if (u == str.size() - 1) return true; int dx[4] = &#123;-1, 0, 1, 0&#125;, dy[4] = &#123;0, 1, 0, -1&#125;; char t = matrix[x][y]; matrix[x][y] = &apos;*&apos;; for (int i = 0; i &lt; 4; i ++ ) &#123; int a = x + dx[i], b = y + dy[i]; if (a &gt;= 0 &amp;&amp; a &lt; matrix.size() &amp;&amp; b &gt;= 0 &amp;&amp; b &lt; matrix[a].size()) &#123; if (dfs(matrix, str, u + 1, a, b)) return true; &#125; &#125; matrix[x][y] = t; return false;&#125; BFS时间复杂度 $O(状态数*转移方式)$ 空间复杂度 $O(状态数)$ 最短距离模型迷宫起点到终点的最少步数1234567891011121314151617181920212223242526272829303132const int INF = 1e8;typedef pair&lt;int, int&gt; PII;queue&lt;PII&gt; que;char maze[N][M];int d[N][M];int dx[4] = &#123;1, 0, -1, 0&#125;;int dy[4] = &#123;0, 1, 0, -1&#125;;for (int i = 0; i &lt; n; i ++) &#123; for (int j = 0; j &lt; m; j++) &#123; d[i][j] = INF; &#125;&#125;int sx, sy, gx, gy;que.push(PII(sx, sy));d[sx][sy] = 0;while(!que.empty()) &#123; PII p = que.front(); que.pop(); if (p.first == gx &amp;&amp; p.second == gy) break; for (int i = 0; i &lt; 4; i++) &#123; int nx = p.first + dx[i]; int ny = p.second + dy[i]; if (nx &gt;= 0 &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; m &amp;&amp; maze[nx][ny] != &apos;#&apos; &amp;&amp; d[nx][ny] == INF) &#123; que.push(PII(nx, ny)); d[nx][ny] = d[p.first][p.second] + 1; &#125; &#125;&#125; Flood Fill/连通域计数DFS和BFS均可实现，可在线性时间找到某个点的连通块，但DFS数据较大可能会爆栈 湖泊计数 1234567891011121314151617181920212223242526272829303132333435363738typedef pair&lt;int, int&gt; PII;const int maxn = 100;int n,m;char field[maxn][maxn];int dx[8]=&#123;0,1,1,1,0,-1,-1,-1&#125;;int dy[8]=&#123;1,1,0,-1,-1,-1,0,1&#125;;void dfs(int sx,int sy)&#123; field[sx][sy]=&apos;.&apos;; for (int i = 0; i &lt; 8; i++) &#123; int nx = sx + dx[i]; int ny = sy + dy[i]; if (nx &gt;= 0 &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; m &amp;&amp; field[nx][ny]==&apos;W&apos;) dfs(nx, ny);//深度优先搜索无需在judge后标记节点，因为会递归调用；而bfs只调用一次 &#125;&#125;void bfs(int sx,int sy)&#123; queue&lt;P&gt; que; que.push(make_pair(sx, sy)); field[sx][sy]=&apos;.&apos;; while (!que.empty()) &#123; PII p = que.front(); que.pop(); for (int i = 0; i &lt; 8; i++) &#123; int nx = p.first + dx[i]; int ny = p.second + dy[i]; if (nx &gt;= 0 &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; m &amp;&amp; field[nx][ny]==&apos;W&apos;) &#123; que.push(make_pair(nx, ny)); field[nx][ny] = &apos;.&apos;; &#125; &#125; &#125;&#125; 最小步数模型棋盘整体从一个状态变换为另一状态所需的最小步数，状态表示通常使用字符串，距离使用哈希 e.x 八数码 （题目链接） 12345678910111213141516171819202122232425262728293031323334353637int bfs(string start) &#123; string end = &quot;12345678x&quot;; queue&lt;string&gt; que; unordered_map&lt;string, int&gt; d; que.push(start); d[start] = 0; while(que.size()) &#123; auto t = q.front(); q.pop(); int dist = d[t]; if (t == end) return dist; int dx[4] = &#123;-1, 0, 1, 0&#125;; int dy[4] = &#123;0, 1, 0, -1&#125;; int k = t.find(&apos;x&apos;); int x = k / 3, y = k % 3; for (int i = 0; i &lt; 4; i++) &#123; int nx = x + dx[i]; int ny = y + dy[i]; if (nx &gt;= 0 &amp;&amp; nx &lt; 3 &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; 3) &#123; swap(t[k], t[nx * 3 + b]); if (!d.count(t)) &#123; d[t] = dist + 1; que.push(t); &#125; swap(t[k], t[nx * 3 + b]); // 注意恢复状态 &#125; &#125; &#125; return -1;&#125; e.x 魔板（题目链接） 12 多源BFS矩阵各点到多个候选起点的最短距离 可假设一虚拟源点，将其与多个起点分别相连，则转换为单源BFS的最短距离，实际实现时只需要将多个起点在第一轮都加入队列即可 双端队列BFS适用于不同边权的情况 BFS优化双向广搜 A* 并查集增加树高rank数组，每次从rank小的树向rank大的树连边，避免退化 路径压缩：每次查询到根节点将该节点的parent直接连到根 对n个元素的并查集操作一次时间$O(α(n))$，$α$为阿克曼函数的反函数，比$O(lgn)$快。 1234567891011121314151617181920212223242526void init() &#123; vector&lt;int&gt; par(n); vector&lt;int&gt; rank(n, 0); for (int i = 0; i &lt; n; i++) &#123; par[i] = i; &#125;&#125;int find (int x, vector&lt;int&gt;&amp; par) &#123; return par[x] == x? x : par[x] = find(par[x], par);&#125;void unite(int x, int y, vector&lt;int&gt;&amp; par, vector&lt;int&gt;&amp; rank) &#123; x = find(x, par); y = find(y, par); if (x == y) return; else if (rank[x] &lt; rank[y]) &#123; par[x] = y; &#125; else &#123; par[y] = x; // x为根且高度需加1 if (rank[x] == rank[y]) rank[x]++; &#125; &#125; 边带权并查集扩展域并查集POJ1182 食物链 归并排序数组归并排序 注意合并时所需额外空间的处理 vector&lt;int&gt; tmp(r - l + 1); 12345678910111213141516void mergeSort(vector&lt;int&gt;&amp; a, int l, int r) &#123; if (l &gt;= r) return; int mid = l + r &gt;&gt; 1; mergeSort(a, l, mid); mergeSort(a, mid + 1, r); vector&lt;int&gt; tmp(r - l + 1); int k = 0, i = l, j = mid + 1; while (i &lt;= mid &amp;&amp; j &lt;= r) &#123; if (a[i] &lt;= a[j]) tmp[k++] = a[i++]; else tmp[k++] = a[j++]; &#125; while(i &lt;= mid) tmp[k++] = a[i++]; while(j &lt;= r) tmp[k++] = a[j++]; for (int i = l, j = 0; i &lt;= r; i++, j++) a[i] = tmp[j];&#125; 合并两个有序链表12345678910111213141516171819202122232425262728293031struct ListNode &#123; int val; ListNode* next;&#125;;ListNode* mergeList(ListNode* l1, ListNode* l2) &#123; ListNode* dummy = new ListNode(-1); ListNode* cur = dummy; while(l1 &amp;&amp; l2) &#123; if (l1-&gt;val &lt;= l2-&gt;val) &#123; cur-&gt;next = l1; l1 = l1-&gt;next; cur = cur-&gt;next; &#125; else &#123; cur-&gt;next = l2; l2 = l2-&gt;next; cur = cur-&gt;next; &#125; &#125; while(l1) &#123; cur-&gt;next = l1; l1 = l1-&gt;next; cur = cur-&gt;next; &#125; while(l2) &#123; cur-&gt;next = l2; l2 = l2-&gt;next; cur = cur-&gt;next; &#125; return dummy-&gt;next;&#125; 合并k个有序链表分治或最小堆 链表归并排序逆序对的数量分治：构成逆序对的两个数同在分治后的左侧区间或右侧区间，或者分别位于左右两个区间需要在归并时计算 归并计算逆序对：对右侧区间的每个数计算左侧区间中大于它的数的个数，最后全部求和 123456789101112131415161718192021222324long long mergeSort(int l, int r) &#123; if (l &gt;= r) return 0; int mid = l + r &gt;&gt; 1; long long res = mergeSort(l, mid) + mergeSort(mid + 1, r); int k = 0, i = l, j = mid + 1; vector&lt;int&gt; tmp(r - l + 1); while (i &lt;= mid &amp;&amp; j &lt;= r) &#123; if (a[i] &lt;= a[j]) tmp[k++] = a[i++]; else &#123; res += mid - i + 1; tmp[k++] = a[j++]; &#125; &#125; while(i &lt;= mid) tmp[k++] = a[i++]; while(j &lt;= r) tmp[k++] = a[j++]; for (int i = l, j = 0; i &lt;= r; i++, j++) a[i] = tmp[j]; return res;&#125; 快速排序&amp;快速选择快速排序 $O(nlgn)$ 12345678910111213void qSort(int q[], int l, int r)&#123; if (l &gt;= r) return; // x选择q[l]或下中位数，递归子区间选[l, j], [j + 1, r] int i = l - 1, j = r + 1, x = q[l + r &gt;&gt; 1]; while (i &lt; j) &#123; do i ++ ; while (q[i] &lt; x); do j -- ; while (q[j] &gt; x); if (i &lt; j) swap(q[i], q[j]); &#125; qSort(q, l, j), qSort(q, j + 1, r);&#125; 快速选择$O(n)$ 1234567891011121314151617int qSelect(vector&lt;int&gt;&amp; a, int l, int r, int k) &#123; if (l == r) return a[l]; int x = a[l], i = l - 1, j = r + 1; while (i &lt; j) &#123; while(a[++ i] &lt; x); while(a[-- j] &gt; x); if (i &lt; j) &#123; swap(a[i], a[j]); &#125; &#125; int cnt = j - l + 1; if (cnt &gt;= k) return qSelect(a, l, j, k); else return qSelect(a, j + 1, r, k - cnt);&#125; 堆插入元素 右下插入 12heap[++size] = x;up(size); 删除堆顶 交换后删除右下元素 123heap[1] = heap[size];size--;down(1); 删除任一元素 1234heap[k] = heap[size];size--;down(k);up(k); $O(1)$时间建堆，数列错位相减可证明 123for (int i = n / 2; i; i--) &#123; down(i);&#125; 通用操作 123456789101112131415void down(int u) &#123; int t = u; if (u * 2 &lt;= size &amp;&amp; h[u * 2] &lt; h[t]) t = u * 2; if (u * 2 + 1 &lt;= size &amp;&amp; h[u * 2 + 1] &lt; h[t]) t = u * 2 + 1; if (u != t) &#123; swap(h[u], h[t]); down(t); &#125;&#125;void up(int u) &#123; while (u / 2 &amp;&amp; h[u] &lt; h[u / 2]) &#123; swap(h[u], h[u / 2]); u &gt;&gt;= 1; &#125;&#125; 最大堆 1priority_queue, greater &gt; que; 最小堆 1priority_queue que; 前k大的数快速选择算法 $O(n)$ + 排序$O(klgk)$ 123456789101112131415161718192021222324252627282930class Solution &#123;public: vector&lt;int&gt; qSelect(vector&lt;int&gt;&amp; a, int l, int r, int k) &#123; if (l == r) &#123; vector&lt;int&gt; res(a.begin(), a.begin()+l+1); return res; &#125; int x = a[l], i = l - 1, j = r + 1; while (i &lt; j) &#123; while(a[++ i] &lt; x); while(a[-- j] &gt; x); if (i &lt; j) &#123; swap(a[i], a[j]); &#125; &#125; int cnt = j - l + 1; if (cnt &gt;= k) return qSelect(a, l, j, k); else return qSelect(a, j + 1, r, k - cnt); &#125; vector&lt;int&gt; getLeastNumbers_Solution(vector&lt;int&gt; input, int k) &#123; int n = input.size(); if (!n) return &#123;&#125;; vector&lt;int&gt; res = qSelect(input, 0, n - 1, k); sort(res.begin(), res.end()); return res; &#125;&#125;; 最小堆（注意求前k大的数应该用最小堆）$O(nlgk)$ 1234567891011121314vector&lt;int&gt; getLeastNumbers_Solution(vector&lt;int&gt; input, int k) &#123; priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; heap; for (int i = 0; i &lt; input.size(); i++) &#123; heap.push(input[i]); if (heap.size() &gt; k) heap.pop(); &#125; vector&lt;int&gt; res; for (int i = 0; i &lt; k; i++) &#123; res.push_back(heap.top()); heap.pop(); &#125; reverse(res.begin(), res.end()); return res; &#125; 数据流的中位数维护一个最大堆来存放较小一半的数和一个最小堆来存放较大一半的树，保证两个堆的数目保持一致或最多差一，如果两堆顶逆序交换即可。 1234567891011121314151617181920priority_queue&lt;int&gt; maxHeap;priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; minHeap;void insert(int num)&#123; maxHeap.push(num); if (minHeap.size() &amp;&amp; minHeap.top() &lt; maxHeap.top()) &#123; auto p = minHeap.top(), q = maxHeap.top(); minHeap.pop(); maxHeap.pop(); minHeap.push(q); maxHeap.push(p); &#125; if (maxHeap.size() - minHeap.size() &gt; 1) &#123; minHeap.push(maxHeap.top()); maxHeap.pop(); &#125;&#125;double getMedian()&#123; if (maxHeap.size() + minHeap.size() &amp; 1) return maxHeap.top(); else return (maxHeap.top() + minHeap.top()) / 2.0; &#125; 位运算取最靠右的一位1123int lowbit(int x) &#123; return x &amp; -x;&#125; 二进制中1的个数1234while(x) &#123; x -= lowbit(x); res++;&#125; 获取/设置右起第k位数1234// 获取第k位n &gt;&gt; k &amp; 1// 设置第k位为1n | 1 &lt;&lt; k 高精度高精度加法数据范围为数字位数而非数字本身，使用string读入，vector逆序存储便于进位 123456789101112131415161718192021222324252627282930vector&lt;int&gt; add(vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;b) &#123; if (a.size() &lt; b.size()) return add(b, a); int t = 0; vector&lt;int&gt; c; for (int i = 0; i &lt; a.size(); i++) &#123; t += a[i]; if (i &lt; b.size()) t += b[i]; c.push_back(t % 10); t /= 10; &#125; if (t) c.push_back(t); return c;&#125;int main() &#123; string a, b; cin &gt;&gt; a &gt;&gt; b; vector&lt;int&gt; A; vector&lt;int&gt; B; for (int i = a.size() - 1; i &gt;= 0; i--) A.push_back(a[i] - &apos;0&apos;); for (int i = b.size() - 1; i &gt;= 0; i--) B.push_back(b[i] - &apos;0&apos;); vector&lt;int&gt; C = add(A, B); reverse(C.begin(), C.end()); for (int i = 0; i &lt; C.size(); i++) &#123; cout &lt;&lt; C[i]; &#125; cout &lt;&lt; endl;&#125; 高精度减法负号的判定 cmp函数：依次判断长度和各个位置的数 减法进位的处理 123c.push_back((t + 10) % 10);if (t &lt; 0) t = 1;else t = 0; 先导0的去除，注意最后结果是0要保留一位0 while(c.size() &gt; 1 &amp;&amp; c.back() == 0) c.pop_back(); 12345678910111213141516171819202122232425262728293031323334353637383940414243444546bool cmp(vector&lt;int&gt; &amp; a, vector&lt;int&gt; &amp; b) &#123; if (a.size() != b.size()) return a.size() &gt; b.size(); for (int i = a.size() - 1; i &gt;= 0; i--) &#123; if (a[i] != b[i]) return a[i] &gt; b[i]; &#125; return true;&#125;vector&lt;int&gt; sub(vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;b) &#123; int t = 0; vector&lt;int&gt; c; for (int i = 0; i &lt; a.size(); i++) &#123; t = a[i] - t; if (i &lt; b.size()) t -= b[i]; c.push_back((t + 10) % 10); if (t &lt; 0) t = 1; else t = 0; &#125; while(c.size() &gt; 1 &amp;&amp; c.back() == 0) c.pop_back(); return c;&#125;int main() &#123; string a, b; cin &gt;&gt; a &gt;&gt; b; vector&lt;int&gt; A; vector&lt;int&gt; B; vector&lt;int&gt; C; for (int i = a.size() - 1; i &gt;= 0; i--) &#123; A.push_back(a[i] - &apos;0&apos;); &#125; for (int i = b.size() - 1; i &gt;= 0; i--) &#123; B.push_back(b[i] - &apos;0&apos;); &#125; if (cmp(A, B)) C = sub(A, B); else &#123; C = sub(B, A); cout &lt;&lt; &quot;-&quot;; &#125; for (int i = C.size() - 1; i &gt;= 0; i--) &#123; cout &lt;&lt; C[i]; &#125; cout &lt;&lt; endl;&#125; 高精度乘法高精度乘整数 12345678910vector&lt;int&gt; mul(vector&lt;int&gt; &amp;a, int b) &#123; vector&lt;int&gt; c; int t = 0; for (int i = 0; i &lt; a.size() || t; i++) &#123; if (i &lt; a.size()) t += a[i] * b; c.push_back(t % 10); t /= 10; &#125; return c;&#125; 高精度乘高精度 123456789101112131415161718vector&lt;int&gt; mul(vector&lt;int&gt; &amp;a, vector&lt;int&gt; &amp;b) &#123; vector&lt;int&gt; res(alen + blen, 0); // i*j存放i+j for (int i = 0; i &lt; alen; i++) &#123; for (int j = 0; j &lt; blen; j++) &#123; res[i + j] += a[i] * b[j]; &#125; &#125; int t = 0; for (int i = 0; i &lt; (int)res.size(); i++) &#123; t += res[i]; res[i] = t % BASE; t /= BASE; &#125; while (res.size() &gt; 1 &amp;&amp; res.back() == 0) &#123; res.pop_back(); &#125;&#125; 高精度除法高精度除整数 123456789101112vector&lt;int&gt; div(vector&lt;int&gt; &amp;a, int b, int &amp;r) &#123; vector&lt;int&gt; c; r = 0; for (int i = a.size() - 1; i &gt;= 0; i--) &#123; r = r * 10 + a[i]; c.push_back(r / b); r %= b; &#125; reverse(c.begin(), c.end()); while(c.size() &gt; 1 &amp;&amp; c.back() == 0) c.pop_back(); return c;&#125; 初级数论辗转相除法最大公约数时间复杂度 $O(\lg max(a,b))$ 123int gcd(int a, int b) &#123; return b ? gcd(b, a % b) : a;&#125; 最大公倍数123int lcm(int a, int b) &#123; return a * b / gcd(a, b);&#125; 扩展欧几里得算法求x, y整数，使得ax + by = gcd(a, b)，时间复杂度 $O(\lg max(a,b))$ 裴蜀定理有任意正整数a, b，gcd（a，b）= d，那么对于任意的整数x，y，ax+by都一定是d的倍数，特别地，一定存在整数x，y，使ax+by=d成立。推论a,b互素的充要条件是存在整数x，y使ax+by=1 123456789int exgcd(int a, int b, int &amp;x, int &amp;y) &#123; if (!b) &#123; x = 1, y = 0; return a; &#125; int d = exgcd(b, a % b, y, x); y -= a / b * x; return d;&#125; 素数素数判定 / 试除法试除法实现素数判定、约数枚举、整数分解的时间复杂度均为 $O(\sqrt n)$ 1234567bool isPrime(int x) &#123; if (x &lt; 2) return false; for (int i = 2; i &lt;= x / i; i++) &#123; if (x % i == 0) return false; &#125; return true;&#125; 约数枚举 12345678910vector&lt;int&gt; divisor(int x) &#123; vector&lt;int&gt; res; for (int i = 2; i &lt;= x / i; i++) &#123; if (x % i == 0) &#123; res.push_back(i); if (i != x / i) res.push_back(x / i); &#125; &#125; return res;&#125; 整数分解 1234567891011map&lt;int, int&gt; prime_factor(int x) &#123; map&lt;int, int&gt; res; for (int i = 2; i &lt;= x / i; i++) &#123; while(x % i == 0) &#123; res[i]++; x /= i; &#125; &#125; if (x != 1) res[x] = 1; return res;&#125; 素数筛法埃氏筛法 时间复杂度 $O(n \lg n lg n)$ 12345678910111213int prime[N];int st[N];int sieve(int n) &#123; int p = 0; for (int i = 2; i &lt;= n; i++) &#123; if (st[i]) continue; prime[p++] = i; for (int j = i; j &lt;= n; j += i) st[j] = true; &#125; return p;&#125; 快速幂求$a^k\mod p$的值，反复平方法 时间复杂度 $O(\lg k)$ 预处理出 $a^{2^0} \mod p$, $a^{2^1} \mod p$, $a^{2^2} \mod p$,…, $a^{2^{lgk}} \mod p$的值（反复平方k次），然后根据底数不变指数相加，将k拆分为若干个2的次幂之和，则可以根据k的二进制形式将预处理的值按需相乘 1234567891011typedef long long LL;ll mod_pow(ll a, ll k, ll p) &#123; ll res = 1; while (k) &#123; if (k &amp; 1) res = res * a % p; a = a * a % p; k &gt;&gt;= 1; &#125; return res;&#125;]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Leetcode链表题目总结]]></title>
    <url>%2F2019%2F03%2F25%2Flinked-list%2F</url>
    <content type="text"><![CDATA[Leetcode链表题常用方法总结： dummy node 常用于链表的head可能被修改或删除的情况，可简化单链表没有前向指针所带来的问题，通常使用current = dummy进行遍历，最终返回 dummy-&gt;next 链表中尽量避免new新的节点，而是在原链表上直接操作地址 在插入和删除操作中使用临时变量来存储next指针 需要反转链表使，通常需要使用pre指针记录前驱节点 通过两个指针几何变换来解决链表长度、环检测等问题 对于一些依赖后面节点才能完成的操作，通常使用递归来解决 常见题目： 从尾到头打印链表反向迭代器rbegin(), rend()，栈，递归 O(1)时间删除节点替换下一节点的值，直接删除下一个节点 尾节点只能从头遍历 删除重复节点删除倒数第k个节点成对反转节点反转链表1234567891011ListNode* reverseList(ListNode* head) &#123; ListNode* pre = NULL; ListNode* cur = head; while (cur) &#123; ListNode* next = cur-&gt;next; cur-&gt;next = pre; pre = cur; cur = next; &#125; return pre;&#125; 合并两个有序单链表1234567891011121314151617ListNode* merge(ListNode* l1, ListNode* l2) &#123; ListNode* dummy = new ListNode(-1); ListNode* cur = dummy; while (l1 &amp;&amp; l2) &#123; if (l1-&gt;val &lt;= l2 -&gt; val) &#123; cur-&gt;next = l1; cur = cur-&gt;next; l1 = l1-&gt;next; &#125; else &#123; cur-&gt;next = l2; cur = cur-&gt;next; l2 = l2-&gt;next; &#125; &#125; cur-&gt;next = (l1 == NULL ? l2 : l1); return dummy-&gt;next;&#125; 链表归并排序找两个链表交汇点两个链表同时走a+b+c步 12345678910ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) &#123; ListNode *p = headA, *q = headB; while (p != q) &#123; if (p) p = p-&gt;next; else p = headB; if (q) q = q-&gt;next; else q = headA; &#125; return p;&#125; 链表环的入口两指针一快一满，快指针以两倍速度行走，必定相遇在环内 相遇点单步遍历直至回到相同位置，可得环的长度n 两指针重新从头部以相同速度行走，一指针先走n步，两指针相遇位置即环的入口 复杂链表的复制带random指针的listNode节点的复制 使用哈希表保存random指针的原节点和复制节点对应关系 在原链表上穿叉复制节点]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
</search>
